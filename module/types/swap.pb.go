// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bep3/swap.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	github_com_tendermint_tendermint_libs_bytes "github.com/tendermint/tendermint/libs/bytes"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AtomicSwap contains the information for an atomic swap
type AtomicSwap struct {
	Amount              github_com_cosmos_cosmos_sdk_types.Coins             `protobuf:"bytes,1,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount" yaml:"amount"`
	RandomNumberHash    github_com_tendermint_tendermint_libs_bytes.HexBytes `protobuf:"bytes,2,opt,name=random_number_hash,json=randomNumberHash,proto3,casttype=github.com/tendermint/tendermint/libs/bytes.HexBytes" json:"random_number_hash,omitempty" yaml:"random_number_hash"`
	ExpireTimestamp     int64                                                `protobuf:"varint,3,opt,name=expire_timestamp,json=expireTimestamp,proto3" json:"expire_timestamp,omitempty" yaml:"expire_timestamp"`
	Timestamp           int64                                                `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty" yaml:"timestamp"`
	Sender              string                                               `protobuf:"bytes,5,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	Recipient           string                                               `protobuf:"bytes,6,opt,name=recipient,proto3" json:"recipient,omitempty" yaml:"recipient"`
	SenderOtherChain    string                                               `protobuf:"bytes,7,opt,name=sender_other_chain,json=senderOtherChain,proto3" json:"sender_other_chain,omitempty" yaml:"sender_other_chain"`
	RecipientOtherChain string                                               `protobuf:"bytes,8,opt,name=recipient_other_chain,json=recipientOtherChain,proto3" json:"recipient_other_chain,omitempty" yaml:"recipient_other_chain"`
	ClosedBlock         int64                                                `protobuf:"varint,9,opt,name=closed_block,json=closedBlock,proto3" json:"closed_block,omitempty" yaml:"closed_block"`
	Status              SwapStatus                                           `protobuf:"varint,10,opt,name=status,proto3,casttype=SwapStatus" json:"status,omitempty" yaml:"status"`
	CrossChain          bool                                                 `protobuf:"varint,11,opt,name=cross_chain,json=crossChain,proto3" json:"cross_chain,omitempty" yaml:"cross_chain"`
	Direction           SwapDirection                                        `protobuf:"varint,12,opt,name=direction,proto3,casttype=SwapDirection" json:"direction,omitempty" yaml:"direction"`
}

func (m *AtomicSwap) Reset()      { *m = AtomicSwap{} }
func (*AtomicSwap) ProtoMessage() {}
func (*AtomicSwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_576398e36903b242, []int{0}
}
func (m *AtomicSwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AtomicSwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AtomicSwap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AtomicSwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AtomicSwap.Merge(m, src)
}
func (m *AtomicSwap) XXX_Size() int {
	return m.Size()
}
func (m *AtomicSwap) XXX_DiscardUnknown() {
	xxx_messageInfo_AtomicSwap.DiscardUnknown(m)
}

var xxx_messageInfo_AtomicSwap proto.InternalMessageInfo

func (m *AtomicSwap) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *AtomicSwap) GetRandomNumberHash() github_com_tendermint_tendermint_libs_bytes.HexBytes {
	if m != nil {
		return m.RandomNumberHash
	}
	return nil
}

func (m *AtomicSwap) GetExpireTimestamp() int64 {
	if m != nil {
		return m.ExpireTimestamp
	}
	return 0
}

func (m *AtomicSwap) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *AtomicSwap) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *AtomicSwap) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *AtomicSwap) GetSenderOtherChain() string {
	if m != nil {
		return m.SenderOtherChain
	}
	return ""
}

func (m *AtomicSwap) GetRecipientOtherChain() string {
	if m != nil {
		return m.RecipientOtherChain
	}
	return ""
}

func (m *AtomicSwap) GetClosedBlock() int64 {
	if m != nil {
		return m.ClosedBlock
	}
	return 0
}

func (m *AtomicSwap) GetStatus() SwapStatus {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *AtomicSwap) GetCrossChain() bool {
	if m != nil {
		return m.CrossChain
	}
	return false
}

func (m *AtomicSwap) GetDirection() SwapDirection {
	if m != nil {
		return m.Direction
	}
	return 0
}

// Slice of Augmented Atomic Swaps
type AugmentedAtomicSwaps struct {
	AugmentedAtomicSwaps []AugmentedAtomicSwap `protobuf:"bytes,1,rep,name=augmented_atomic_swaps,json=augmentedAtomicSwaps,proto3" json:"augmented_atomic_swaps" yaml:"augmented_atomic_swaps"`
}

func (m *AugmentedAtomicSwaps) Reset()         { *m = AugmentedAtomicSwaps{} }
func (m *AugmentedAtomicSwaps) String() string { return proto.CompactTextString(m) }
func (*AugmentedAtomicSwaps) ProtoMessage()    {}
func (*AugmentedAtomicSwaps) Descriptor() ([]byte, []int) {
	return fileDescriptor_576398e36903b242, []int{1}
}
func (m *AugmentedAtomicSwaps) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AugmentedAtomicSwaps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AugmentedAtomicSwaps.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AugmentedAtomicSwaps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AugmentedAtomicSwaps.Merge(m, src)
}
func (m *AugmentedAtomicSwaps) XXX_Size() int {
	return m.Size()
}
func (m *AugmentedAtomicSwaps) XXX_DiscardUnknown() {
	xxx_messageInfo_AugmentedAtomicSwaps.DiscardUnknown(m)
}

var xxx_messageInfo_AugmentedAtomicSwaps proto.InternalMessageInfo

func (m *AugmentedAtomicSwaps) GetAugmentedAtomicSwaps() []AugmentedAtomicSwap {
	if m != nil {
		return m.AugmentedAtomicSwaps
	}
	return nil
}

// AtomicSwap with an ID
type AugmentedAtomicSwap struct {
	ID                  string                                               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	Amount              github_com_cosmos_cosmos_sdk_types.Coins             `protobuf:"bytes,2,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount" yaml:"amount"`
	RandomNumberHash    github_com_tendermint_tendermint_libs_bytes.HexBytes `protobuf:"bytes,3,opt,name=random_number_hash,json=randomNumberHash,proto3,casttype=github.com/tendermint/tendermint/libs/bytes.HexBytes" json:"random_number_hash,omitempty" yaml:"random_number_hash"`
	ExpireTimestamp     int64                                                `protobuf:"varint,4,opt,name=expire_timestamp,json=expireTimestamp,proto3" json:"expire_timestamp,omitempty" yaml:"expire_timestamp"`
	Timestamp           int64                                                `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty" yaml:"timestamp"`
	Sender              string                                               `protobuf:"bytes,6,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	Recipient           string                                               `protobuf:"bytes,7,opt,name=recipient,proto3" json:"recipient,omitempty" yaml:"recipient"`
	SenderOtherChain    string                                               `protobuf:"bytes,8,opt,name=sender_other_chain,json=senderOtherChain,proto3" json:"sender_other_chain,omitempty" yaml:"sender_other_chain"`
	RecipientOtherChain string                                               `protobuf:"bytes,9,opt,name=recipient_other_chain,json=recipientOtherChain,proto3" json:"recipient_other_chain,omitempty" yaml:"recipient_other_chain"`
	ClosedBlock         int64                                                `protobuf:"varint,10,opt,name=closed_block,json=closedBlock,proto3" json:"closed_block,omitempty" yaml:"closed_block"`
	Status              SwapStatus                                           `protobuf:"varint,11,opt,name=status,proto3,casttype=SwapStatus" json:"status,omitempty" yaml:"status"`
	CrossChain          bool                                                 `protobuf:"varint,12,opt,name=cross_chain,json=crossChain,proto3" json:"cross_chain,omitempty" yaml:"cross_chain"`
	Direction           SwapDirection                                        `protobuf:"varint,13,opt,name=direction,proto3,casttype=SwapDirection" json:"direction,omitempty" yaml:"direction"`
}

func (m *AugmentedAtomicSwap) Reset()         { *m = AugmentedAtomicSwap{} }
func (m *AugmentedAtomicSwap) String() string { return proto.CompactTextString(m) }
func (*AugmentedAtomicSwap) ProtoMessage()    {}
func (*AugmentedAtomicSwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_576398e36903b242, []int{2}
}
func (m *AugmentedAtomicSwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AugmentedAtomicSwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AugmentedAtomicSwap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AugmentedAtomicSwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AugmentedAtomicSwap.Merge(m, src)
}
func (m *AugmentedAtomicSwap) XXX_Size() int {
	return m.Size()
}
func (m *AugmentedAtomicSwap) XXX_DiscardUnknown() {
	xxx_messageInfo_AugmentedAtomicSwap.DiscardUnknown(m)
}

var xxx_messageInfo_AugmentedAtomicSwap proto.InternalMessageInfo

func (m *AugmentedAtomicSwap) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *AugmentedAtomicSwap) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *AugmentedAtomicSwap) GetRandomNumberHash() github_com_tendermint_tendermint_libs_bytes.HexBytes {
	if m != nil {
		return m.RandomNumberHash
	}
	return nil
}

func (m *AugmentedAtomicSwap) GetExpireTimestamp() int64 {
	if m != nil {
		return m.ExpireTimestamp
	}
	return 0
}

func (m *AugmentedAtomicSwap) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *AugmentedAtomicSwap) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *AugmentedAtomicSwap) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *AugmentedAtomicSwap) GetSenderOtherChain() string {
	if m != nil {
		return m.SenderOtherChain
	}
	return ""
}

func (m *AugmentedAtomicSwap) GetRecipientOtherChain() string {
	if m != nil {
		return m.RecipientOtherChain
	}
	return ""
}

func (m *AugmentedAtomicSwap) GetClosedBlock() int64 {
	if m != nil {
		return m.ClosedBlock
	}
	return 0
}

func (m *AugmentedAtomicSwap) GetStatus() SwapStatus {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *AugmentedAtomicSwap) GetCrossChain() bool {
	if m != nil {
		return m.CrossChain
	}
	return false
}

func (m *AugmentedAtomicSwap) GetDirection() SwapDirection {
	if m != nil {
		return m.Direction
	}
	return 0
}

// MsgCreateAtomicSwap contains an AtomicSwap struct
type MsgCreateAtomicSwap struct {
	From                string                                               `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty" yaml:"from"`
	To                  string                                               `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty" yaml:"to"`
	RecipientOtherChain string                                               `protobuf:"bytes,3,opt,name=recipient_other_chain,json=recipientOtherChain,proto3" json:"recipient_other_chain,omitempty" yaml:"recipient_other_chain"`
	SenderOtherChain    string                                               `protobuf:"bytes,4,opt,name=sender_other_chain,json=senderOtherChain,proto3" json:"sender_other_chain,omitempty" yaml:"sender_other_chain"`
	RandomNumberHash    github_com_tendermint_tendermint_libs_bytes.HexBytes `protobuf:"bytes,5,opt,name=random_number_hash,json=randomNumberHash,proto3,casttype=github.com/tendermint/tendermint/libs/bytes.HexBytes" json:"random_number_hash,omitempty" yaml:"random_number_hash"`
	Timestamp           int64                                                `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty" yaml:"timestamp"`
	Amount              github_com_cosmos_cosmos_sdk_types.Coins             `protobuf:"bytes,7,rep,name=Amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"Amount" yaml:"amount"`
	TimeSpan            int64                                                `protobuf:"varint,8,opt,name=time_span,json=timeSpan,proto3" json:"time_span,omitempty" yaml:"time_span"`
}

func (m *MsgCreateAtomicSwap) Reset()      { *m = MsgCreateAtomicSwap{} }
func (*MsgCreateAtomicSwap) ProtoMessage() {}
func (*MsgCreateAtomicSwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_576398e36903b242, []int{3}
}
func (m *MsgCreateAtomicSwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateAtomicSwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateAtomicSwap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateAtomicSwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateAtomicSwap.Merge(m, src)
}
func (m *MsgCreateAtomicSwap) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateAtomicSwap) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateAtomicSwap.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateAtomicSwap proto.InternalMessageInfo

func (m *MsgCreateAtomicSwap) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgCreateAtomicSwap) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *MsgCreateAtomicSwap) GetRecipientOtherChain() string {
	if m != nil {
		return m.RecipientOtherChain
	}
	return ""
}

func (m *MsgCreateAtomicSwap) GetSenderOtherChain() string {
	if m != nil {
		return m.SenderOtherChain
	}
	return ""
}

func (m *MsgCreateAtomicSwap) GetRandomNumberHash() github_com_tendermint_tendermint_libs_bytes.HexBytes {
	if m != nil {
		return m.RandomNumberHash
	}
	return nil
}

func (m *MsgCreateAtomicSwap) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *MsgCreateAtomicSwap) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *MsgCreateAtomicSwap) GetTimeSpan() int64 {
	if m != nil {
		return m.TimeSpan
	}
	return 0
}

// MsgClaimAtomicSwap defines a AtomicSwap claim
type MsgClaimAtomicSwap struct {
	From         string                                               `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty" yaml:"from"`
	SwapID       github_com_tendermint_tendermint_libs_bytes.HexBytes `protobuf:"bytes,2,opt,name=swap_id,json=swapId,proto3,casttype=github.com/tendermint/tendermint/libs/bytes.HexBytes" json:"swap_id,omitempty" yaml:"swap_id"`
	RandomNumber github_com_tendermint_tendermint_libs_bytes.HexBytes `protobuf:"bytes,3,opt,name=random_number,json=randomNumber,proto3,casttype=github.com/tendermint/tendermint/libs/bytes.HexBytes" json:"random_number,omitempty" yaml:"random_number"`
}

func (m *MsgClaimAtomicSwap) Reset()      { *m = MsgClaimAtomicSwap{} }
func (*MsgClaimAtomicSwap) ProtoMessage() {}
func (*MsgClaimAtomicSwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_576398e36903b242, []int{4}
}
func (m *MsgClaimAtomicSwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimAtomicSwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimAtomicSwap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimAtomicSwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimAtomicSwap.Merge(m, src)
}
func (m *MsgClaimAtomicSwap) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimAtomicSwap) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimAtomicSwap.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimAtomicSwap proto.InternalMessageInfo

func (m *MsgClaimAtomicSwap) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgClaimAtomicSwap) GetSwapID() github_com_tendermint_tendermint_libs_bytes.HexBytes {
	if m != nil {
		return m.SwapID
	}
	return nil
}

func (m *MsgClaimAtomicSwap) GetRandomNumber() github_com_tendermint_tendermint_libs_bytes.HexBytes {
	if m != nil {
		return m.RandomNumber
	}
	return nil
}

// MsgRefundAtomicSwap defines a refund msg
type MsgRefundAtomicSwap struct {
	From   string                                               `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty" yaml:"from"`
	SwapID github_com_tendermint_tendermint_libs_bytes.HexBytes `protobuf:"bytes,2,opt,name=swap_id,json=swapId,proto3,casttype=github.com/tendermint/tendermint/libs/bytes.HexBytes" json:"swap_id,omitempty" yaml:"swap_id"`
}

func (m *MsgRefundAtomicSwap) Reset()      { *m = MsgRefundAtomicSwap{} }
func (*MsgRefundAtomicSwap) ProtoMessage() {}
func (*MsgRefundAtomicSwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_576398e36903b242, []int{5}
}
func (m *MsgRefundAtomicSwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRefundAtomicSwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRefundAtomicSwap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRefundAtomicSwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRefundAtomicSwap.Merge(m, src)
}
func (m *MsgRefundAtomicSwap) XXX_Size() int {
	return m.Size()
}
func (m *MsgRefundAtomicSwap) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRefundAtomicSwap.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRefundAtomicSwap proto.InternalMessageInfo

func (m *MsgRefundAtomicSwap) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgRefundAtomicSwap) GetSwapID() github_com_tendermint_tendermint_libs_bytes.HexBytes {
	if m != nil {
		return m.SwapID
	}
	return nil
}

// Proto type required for serializing the previous block time to manage supply
// expirations.
type PrevBlockTime struct {
	Val time.Time `protobuf:"bytes,1,opt,name=val,proto3,stdtime" json:"val"`
}

func (m *PrevBlockTime) Reset()         { *m = PrevBlockTime{} }
func (m *PrevBlockTime) String() string { return proto.CompactTextString(m) }
func (*PrevBlockTime) ProtoMessage()    {}
func (*PrevBlockTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_576398e36903b242, []int{6}
}
func (m *PrevBlockTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrevBlockTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrevBlockTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrevBlockTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrevBlockTime.Merge(m, src)
}
func (m *PrevBlockTime) XXX_Size() int {
	return m.Size()
}
func (m *PrevBlockTime) XXX_DiscardUnknown() {
	xxx_messageInfo_PrevBlockTime.DiscardUnknown(m)
}

var xxx_messageInfo_PrevBlockTime proto.InternalMessageInfo

func (m *PrevBlockTime) GetVal() time.Time {
	if m != nil {
		return m.Val
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*AtomicSwap)(nil), "bep3.AtomicSwap")
	proto.RegisterType((*AugmentedAtomicSwaps)(nil), "bep3.AugmentedAtomicSwaps")
	proto.RegisterType((*AugmentedAtomicSwap)(nil), "bep3.AugmentedAtomicSwap")
	proto.RegisterType((*MsgCreateAtomicSwap)(nil), "bep3.MsgCreateAtomicSwap")
	proto.RegisterType((*MsgClaimAtomicSwap)(nil), "bep3.MsgClaimAtomicSwap")
	proto.RegisterType((*MsgRefundAtomicSwap)(nil), "bep3.MsgRefundAtomicSwap")
	proto.RegisterType((*PrevBlockTime)(nil), "bep3.PrevBlockTime")
}

func init() { proto.RegisterFile("bep3/swap.proto", fileDescriptor_576398e36903b242) }

var fileDescriptor_576398e36903b242 = []byte{
	// 999 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xbf, 0x6f, 0xdb, 0xc6,
	0x17, 0x37, 0x25, 0x99, 0xb6, 0x4e, 0xd2, 0xd7, 0xfe, 0x9e, 0xd4, 0x84, 0x71, 0x6b, 0x51, 0x60,
	0x1b, 0x40, 0x1d, 0x42, 0xc2, 0x4e, 0xd1, 0x00, 0x1e, 0x0a, 0x98, 0x0e, 0xda, 0x04, 0x45, 0xdb,
	0x80, 0x76, 0x97, 0x2e, 0xc4, 0x91, 0x3c, 0x4b, 0x44, 0x44, 0x9e, 0xc0, 0x3b, 0x39, 0xf1, 0xdc,
	0xbd, 0xc8, 0xd8, 0xb1, 0x4b, 0x51, 0xa0, 0x4b, 0xff, 0x8d, 0x8c, 0x19, 0x3b, 0x31, 0x85, 0x8c,
	0xfe, 0x03, 0x1c, 0xbb, 0xb4, 0xb8, 0x3b, 0x4a, 0xa4, 0x62, 0x05, 0xa8, 0xe5, 0x20, 0xe9, 0xe4,
	0xbb, 0xf7, 0xe3, 0xf3, 0x9e, 0xef, 0xbd, 0xf7, 0x79, 0x22, 0xd8, 0xf2, 0xf0, 0xf8, 0xae, 0x45,
	0x9f, 0xa0, 0xb1, 0x39, 0x4e, 0x08, 0x23, 0xb0, 0xc6, 0x05, 0x3b, 0x9d, 0x01, 0x19, 0x10, 0x21,
	0xb0, 0xf8, 0x49, 0xea, 0x76, 0xf4, 0x01, 0x21, 0x83, 0x11, 0xb6, 0xc4, 0xcd, 0x9b, 0x9c, 0x5a,
	0x2c, 0x8c, 0x30, 0x65, 0x28, 0xca, 0x9d, 0x77, 0xba, 0x3e, 0xa1, 0x11, 0xa1, 0x96, 0x87, 0x28,
	0xb6, 0xce, 0xf6, 0x3c, 0xcc, 0xd0, 0x9e, 0xe5, 0x93, 0x30, 0x96, 0x7a, 0xe3, 0x6f, 0x15, 0x80,
	0x43, 0x46, 0xa2, 0xd0, 0x3f, 0x7e, 0x82, 0xc6, 0x90, 0x01, 0x15, 0x45, 0x64, 0x12, 0x33, 0x4d,
	0xe9, 0x55, 0xfb, 0x8d, 0xfd, 0x5b, 0xa6, 0xf4, 0x37, 0xb9, 0xbf, 0x99, 0xfb, 0x9b, 0x47, 0x24,
	0x8c, 0xed, 0xc3, 0xe7, 0xa9, 0xbe, 0x96, 0xa5, 0x7a, 0xeb, 0x1c, 0x45, 0xa3, 0x03, 0x43, 0xba,
	0x19, 0xbf, 0xbe, 0xd4, 0xfb, 0x83, 0x90, 0x0d, 0x27, 0x9e, 0xe9, 0x93, 0xc8, 0xca, 0xa3, 0xcb,
	0x3f, 0x77, 0x68, 0xf0, 0xd8, 0x62, 0xe7, 0x63, 0x4c, 0x05, 0x02, 0x75, 0xf2, 0x58, 0xf0, 0x7b,
	0x05, 0xc0, 0x04, 0xc5, 0x01, 0x89, 0xdc, 0x78, 0x12, 0x79, 0x38, 0x71, 0x87, 0x88, 0x0e, 0xb5,
	0x4a, 0x4f, 0xe9, 0x37, 0xed, 0x6f, 0xb3, 0x54, 0xbf, 0x25, 0x63, 0x5c, 0xb6, 0x31, 0xfe, 0x4a,
	0xf5, 0x4f, 0x4a, 0xf1, 0x18, 0x8e, 0x03, 0x9c, 0x44, 0x61, 0xcc, 0xca, 0xc7, 0x51, 0xe8, 0x51,
	0xcb, 0x3b, 0x67, 0x98, 0x9a, 0x0f, 0xf0, 0x53, 0x9b, 0x1f, 0x9c, 0x6d, 0x09, 0xf6, 0xb5, 0xc0,
	0x7a, 0x80, 0xe8, 0x10, 0x7e, 0x0e, 0xb6, 0xf1, 0xd3, 0x71, 0x98, 0x60, 0x77, 0xfe, 0x88, 0x5a,
	0xb5, 0xa7, 0xf4, 0xab, 0xf6, 0xfb, 0x59, 0xaa, 0xdf, 0x94, 0x29, 0xbc, 0x6a, 0x61, 0x38, 0x5b,
	0x52, 0x74, 0x32, 0x93, 0xc0, 0x7d, 0x50, 0x2f, 0x00, 0x6a, 0x02, 0xa0, 0x93, 0xa5, 0xfa, 0xb6,
	0x04, 0x28, 0x79, 0x16, 0x66, 0xf0, 0x63, 0xa0, 0x52, 0x91, 0xaf, 0xb6, 0xde, 0x53, 0xfa, 0x75,
	0xfb, 0xff, 0xc5, 0xc3, 0x4a, 0xb9, 0xe1, 0xe4, 0x06, 0x1c, 0x3e, 0xc1, 0x7e, 0x38, 0x0e, 0x71,
	0xcc, 0x34, 0x55, 0x58, 0x97, 0xe0, 0xe7, 0x2a, 0xc3, 0x29, 0xcc, 0xe0, 0x97, 0x00, 0x4a, 0x6f,
	0x97, 0xb0, 0x21, 0x4e, 0x5c, 0x7f, 0x88, 0xc2, 0x58, 0xdb, 0x10, 0xce, 0xbb, 0xc5, 0xfb, 0x5e,
	0xb6, 0x31, 0x9c, 0x6d, 0x29, 0xfc, 0x86, 0xcb, 0x8e, 0xb8, 0x08, 0x9e, 0x80, 0xf7, 0xe6, 0xc8,
	0x0b, 0x78, 0x9b, 0x02, 0xaf, 0x97, 0xa5, 0xfa, 0x07, 0xaf, 0x24, 0xb3, 0x08, 0xd9, 0x9e, 0xcb,
	0x4b, 0xa8, 0x07, 0xa0, 0xe9, 0x8f, 0x08, 0xc5, 0x81, 0xeb, 0x8d, 0x88, 0xff, 0x58, 0xab, 0x8b,
	0x87, 0xbb, 0x99, 0xa5, 0x7a, 0x5b, 0x82, 0x95, 0xb5, 0x86, 0xd3, 0x90, 0x57, 0x9b, 0xdf, 0xe0,
	0x3d, 0xa0, 0x52, 0x86, 0xd8, 0x84, 0x6a, 0xa0, 0xa7, 0xf4, 0x5b, 0xb6, 0x5e, 0x7a, 0x3d, 0x21,
	0xe7, 0x6d, 0x02, 0x78, 0x83, 0x1f, 0x8b, 0xab, 0x93, 0x9b, 0xc3, 0x7b, 0xa0, 0xe1, 0x27, 0x84,
	0xd2, 0xfc, 0x1f, 0x68, 0xf4, 0x94, 0xfe, 0xa6, 0x7d, 0x23, 0x4b, 0x75, 0x98, 0xc7, 0x2c, 0x94,
	0x86, 0x03, 0xc4, 0x4d, 0x66, 0x7b, 0x04, 0xea, 0x41, 0x98, 0x60, 0x9f, 0x85, 0x24, 0xd6, 0x9a,
	0x22, 0xe8, 0xed, 0xa2, 0x08, 0x73, 0x15, 0x8f, 0xdb, 0xe2, 0x71, 0xef, 0xcf, 0x24, 0x4e, 0xe1,
	0x77, 0x50, 0xfb, 0xf1, 0x27, 0x7d, 0xcd, 0xf8, 0x41, 0x01, 0x9d, 0xc3, 0xc9, 0x20, 0xc2, 0x31,
	0xc3, 0x41, 0x31, 0x8a, 0x14, 0x9e, 0x81, 0x1b, 0x68, 0x26, 0x77, 0x91, 0x50, 0xb8, 0x9c, 0x16,
	0xe8, 0x7c, 0x36, 0x39, 0x31, 0x98, 0x4b, 0x7c, 0xed, 0xdb, 0xf9, 0x6c, 0xee, 0xe6, 0xb3, 0xb9,
	0x14, 0xc6, 0x70, 0x3a, 0x68, 0x49, 0x5c, 0xe3, 0x97, 0x0d, 0xd0, 0x5e, 0x02, 0x0a, 0x3f, 0x04,
	0x95, 0x30, 0xd0, 0x14, 0x51, 0xe4, 0xf6, 0x34, 0xd5, 0x2b, 0x0f, 0xef, 0x67, 0xa9, 0x5e, 0x97,
	0x21, 0xc2, 0xc0, 0x70, 0x2a, 0x61, 0x50, 0x22, 0x90, 0xca, 0xbb, 0x27, 0x90, 0xea, 0xbb, 0x27,
	0x90, 0xda, 0x75, 0x09, 0x64, 0xfd, 0xaa, 0x04, 0xa2, 0x5e, 0x89, 0x40, 0x36, 0xae, 0x43, 0x20,
	0x9b, 0x6f, 0x98, 0x40, 0xea, 0x6f, 0x92, 0x40, 0xc0, 0x4a, 0x04, 0xd2, 0xb8, 0x16, 0x81, 0x34,
	0x57, 0x23, 0x90, 0xd6, 0x6a, 0x04, 0x62, 0xfc, 0x59, 0x03, 0xed, 0xaf, 0xe8, 0xe0, 0x28, 0xc1,
	0x88, 0xe1, 0x85, 0x49, 0xad, 0x9d, 0x26, 0x24, 0xca, 0x67, 0x75, 0x2b, 0x4b, 0xf5, 0x86, 0xc4,
	0xe5, 0x52, 0xc3, 0x11, 0x4a, 0xb8, 0x0b, 0x2a, 0x8c, 0x88, 0x1d, 0x5b, 0xb7, 0x5b, 0xc5, 0x20,
	0x33, 0x62, 0x38, 0x15, 0x46, 0x5e, 0x5f, 0xa4, 0xea, 0x75, 0x8a, 0xb4, 0xbc, 0x8f, 0x6a, 0xab,
	0xf5, 0xd1, 0x6b, 0xa6, 0x7e, 0xfd, 0xed, 0x4e, 0xfd, 0xc2, 0xb4, 0xaa, 0xff, 0x6e, 0x5a, 0x19,
	0x50, 0x0f, 0x25, 0x4b, 0x6e, 0xbc, 0x0d, 0x96, 0x94, 0xb1, 0xe0, 0x9e, 0xcc, 0xd4, 0xa5, 0x63,
	0x24, 0x67, 0xf7, 0x52, 0xa6, 0x42, 0x65, 0x38, 0x9b, 0xfc, 0x7c, 0x3c, 0x46, 0xb3, 0x15, 0xf5,
	0x73, 0x05, 0x40, 0xde, 0x67, 0x23, 0x14, 0x46, 0x57, 0x6d, 0xb3, 0x08, 0x6c, 0xf0, 0x6d, 0xe3,
	0x86, 0x41, 0xfe, 0x7b, 0xee, 0x64, 0x9a, 0xea, 0x2a, 0xf7, 0x17, 0xeb, 0xe3, 0x7f, 0x79, 0xc1,
	0xa5, 0xc9, 0xea, 0x75, 0x51, 0x39, 0xc2, 0xc3, 0x00, 0x4e, 0x40, 0x6b, 0xa1, 0xdc, 0xf9, 0x0e,
	0x78, 0x94, 0xa5, 0x7a, 0x67, 0x49, 0x37, 0xac, 0x1e, 0xb0, 0x59, 0x6e, 0x84, 0xfc, 0x9d, 0x7e,
	0x53, 0xc4, 0x3c, 0x3a, 0xf8, 0x74, 0x12, 0x07, 0xff, 0xed, 0x87, 0xca, 0x33, 0xfe, 0x02, 0xb4,
	0x1e, 0x25, 0xf8, 0x4c, 0xb0, 0x20, 0x5f, 0x40, 0xf0, 0x53, 0x50, 0x3d, 0x43, 0x23, 0x91, 0x69,
	0x63, 0x7f, 0xc7, 0x94, 0x9f, 0x17, 0xe6, 0xec, 0xf3, 0xc2, 0x9c, 0x2f, 0x29, 0x7b, 0x93, 0xf7,
	0xe5, 0xb3, 0x97, 0xba, 0xe2, 0x70, 0x07, 0xfb, 0xb3, 0xe7, 0xd3, 0xae, 0xf2, 0x62, 0xda, 0x55,
	0xfe, 0x98, 0x76, 0x95, 0x67, 0x17, 0xdd, 0xb5, 0x17, 0x17, 0xdd, 0xb5, 0xdf, 0x2f, 0xba, 0x6b,
	0xdf, 0x7d, 0x54, 0x4a, 0x13, 0xdf, 0x89, 0x48, 0x8c, 0xcf, 0x2d, 0xf1, 0x89, 0x13, 0x91, 0x60,
	0x32, 0xc2, 0xb2, 0x53, 0x3d, 0x55, 0x84, 0xb8, 0xfb, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x62,
	0xf4, 0xe8, 0x84, 0xfe, 0x0c, 0x00, 0x00,
}

func (m *AtomicSwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AtomicSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AtomicSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Direction != 0 {
		i = encodeVarintSwap(dAtA, i, uint64(m.Direction))
		i--
		dAtA[i] = 0x60
	}
	if m.CrossChain {
		i--
		if m.CrossChain {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.Status != 0 {
		i = encodeVarintSwap(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x50
	}
	if m.ClosedBlock != 0 {
		i = encodeVarintSwap(dAtA, i, uint64(m.ClosedBlock))
		i--
		dAtA[i] = 0x48
	}
	if len(m.RecipientOtherChain) > 0 {
		i -= len(m.RecipientOtherChain)
		copy(dAtA[i:], m.RecipientOtherChain)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.RecipientOtherChain)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SenderOtherChain) > 0 {
		i -= len(m.SenderOtherChain)
		copy(dAtA[i:], m.SenderOtherChain)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.SenderOtherChain)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Timestamp != 0 {
		i = encodeVarintSwap(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x20
	}
	if m.ExpireTimestamp != 0 {
		i = encodeVarintSwap(dAtA, i, uint64(m.ExpireTimestamp))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RandomNumberHash) > 0 {
		i -= len(m.RandomNumberHash)
		copy(dAtA[i:], m.RandomNumberHash)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.RandomNumberHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSwap(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AugmentedAtomicSwaps) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AugmentedAtomicSwaps) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AugmentedAtomicSwaps) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AugmentedAtomicSwaps) > 0 {
		for iNdEx := len(m.AugmentedAtomicSwaps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AugmentedAtomicSwaps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSwap(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AugmentedAtomicSwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AugmentedAtomicSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AugmentedAtomicSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Direction != 0 {
		i = encodeVarintSwap(dAtA, i, uint64(m.Direction))
		i--
		dAtA[i] = 0x68
	}
	if m.CrossChain {
		i--
		if m.CrossChain {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.Status != 0 {
		i = encodeVarintSwap(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x58
	}
	if m.ClosedBlock != 0 {
		i = encodeVarintSwap(dAtA, i, uint64(m.ClosedBlock))
		i--
		dAtA[i] = 0x50
	}
	if len(m.RecipientOtherChain) > 0 {
		i -= len(m.RecipientOtherChain)
		copy(dAtA[i:], m.RecipientOtherChain)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.RecipientOtherChain)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.SenderOtherChain) > 0 {
		i -= len(m.SenderOtherChain)
		copy(dAtA[i:], m.SenderOtherChain)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.SenderOtherChain)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x32
	}
	if m.Timestamp != 0 {
		i = encodeVarintSwap(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x28
	}
	if m.ExpireTimestamp != 0 {
		i = encodeVarintSwap(dAtA, i, uint64(m.ExpireTimestamp))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RandomNumberHash) > 0 {
		i -= len(m.RandomNumberHash)
		copy(dAtA[i:], m.RandomNumberHash)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.RandomNumberHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSwap(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateAtomicSwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateAtomicSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateAtomicSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeSpan != 0 {
		i = encodeVarintSwap(dAtA, i, uint64(m.TimeSpan))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSwap(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Timestamp != 0 {
		i = encodeVarintSwap(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x30
	}
	if len(m.RandomNumberHash) > 0 {
		i -= len(m.RandomNumberHash)
		copy(dAtA[i:], m.RandomNumberHash)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.RandomNumberHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SenderOtherChain) > 0 {
		i -= len(m.SenderOtherChain)
		copy(dAtA[i:], m.SenderOtherChain)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.SenderOtherChain)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RecipientOtherChain) > 0 {
		i -= len(m.RecipientOtherChain)
		copy(dAtA[i:], m.RecipientOtherChain)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.RecipientOtherChain)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimAtomicSwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimAtomicSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimAtomicSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RandomNumber) > 0 {
		i -= len(m.RandomNumber)
		copy(dAtA[i:], m.RandomNumber)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.RandomNumber)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SwapID) > 0 {
		i -= len(m.SwapID)
		copy(dAtA[i:], m.SwapID)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.SwapID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRefundAtomicSwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRefundAtomicSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRefundAtomicSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SwapID) > 0 {
		i -= len(m.SwapID)
		copy(dAtA[i:], m.SwapID)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.SwapID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrevBlockTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrevBlockTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrevBlockTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Val, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Val):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintSwap(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintSwap(dAtA []byte, offset int, v uint64) int {
	offset -= sovSwap(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AtomicSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovSwap(uint64(l))
		}
	}
	l = len(m.RandomNumberHash)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	if m.ExpireTimestamp != 0 {
		n += 1 + sovSwap(uint64(m.ExpireTimestamp))
	}
	if m.Timestamp != 0 {
		n += 1 + sovSwap(uint64(m.Timestamp))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	l = len(m.SenderOtherChain)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	l = len(m.RecipientOtherChain)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	if m.ClosedBlock != 0 {
		n += 1 + sovSwap(uint64(m.ClosedBlock))
	}
	if m.Status != 0 {
		n += 1 + sovSwap(uint64(m.Status))
	}
	if m.CrossChain {
		n += 2
	}
	if m.Direction != 0 {
		n += 1 + sovSwap(uint64(m.Direction))
	}
	return n
}

func (m *AugmentedAtomicSwaps) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AugmentedAtomicSwaps) > 0 {
		for _, e := range m.AugmentedAtomicSwaps {
			l = e.Size()
			n += 1 + l + sovSwap(uint64(l))
		}
	}
	return n
}

func (m *AugmentedAtomicSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovSwap(uint64(l))
		}
	}
	l = len(m.RandomNumberHash)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	if m.ExpireTimestamp != 0 {
		n += 1 + sovSwap(uint64(m.ExpireTimestamp))
	}
	if m.Timestamp != 0 {
		n += 1 + sovSwap(uint64(m.Timestamp))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	l = len(m.SenderOtherChain)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	l = len(m.RecipientOtherChain)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	if m.ClosedBlock != 0 {
		n += 1 + sovSwap(uint64(m.ClosedBlock))
	}
	if m.Status != 0 {
		n += 1 + sovSwap(uint64(m.Status))
	}
	if m.CrossChain {
		n += 2
	}
	if m.Direction != 0 {
		n += 1 + sovSwap(uint64(m.Direction))
	}
	return n
}

func (m *MsgCreateAtomicSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	l = len(m.RecipientOtherChain)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	l = len(m.SenderOtherChain)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	l = len(m.RandomNumberHash)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovSwap(uint64(m.Timestamp))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovSwap(uint64(l))
		}
	}
	if m.TimeSpan != 0 {
		n += 1 + sovSwap(uint64(m.TimeSpan))
	}
	return n
}

func (m *MsgClaimAtomicSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	l = len(m.SwapID)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	l = len(m.RandomNumber)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	return n
}

func (m *MsgRefundAtomicSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	l = len(m.SwapID)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	return n
}

func (m *PrevBlockTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Val)
	n += 1 + l + sovSwap(uint64(l))
	return n
}

func sovSwap(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSwap(x uint64) (n int) {
	return sovSwap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AtomicSwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSwap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AtomicSwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AtomicSwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomNumberHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandomNumberHash = append(m.RandomNumberHash[:0], dAtA[iNdEx:postIndex]...)
			if m.RandomNumberHash == nil {
				m.RandomNumberHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTimestamp", wireType)
			}
			m.ExpireTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderOtherChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderOtherChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientOtherChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientOtherChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedBlock", wireType)
			}
			m.ClosedBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClosedBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SwapStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChain", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CrossChain = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direction |= SwapDirection(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSwap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSwap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AugmentedAtomicSwaps) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSwap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AugmentedAtomicSwaps: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AugmentedAtomicSwaps: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AugmentedAtomicSwaps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AugmentedAtomicSwaps = append(m.AugmentedAtomicSwaps, AugmentedAtomicSwap{})
			if err := m.AugmentedAtomicSwaps[len(m.AugmentedAtomicSwaps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSwap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSwap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AugmentedAtomicSwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSwap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AugmentedAtomicSwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AugmentedAtomicSwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomNumberHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandomNumberHash = append(m.RandomNumberHash[:0], dAtA[iNdEx:postIndex]...)
			if m.RandomNumberHash == nil {
				m.RandomNumberHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTimestamp", wireType)
			}
			m.ExpireTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderOtherChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderOtherChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientOtherChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientOtherChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedBlock", wireType)
			}
			m.ClosedBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClosedBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SwapStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChain", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CrossChain = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direction |= SwapDirection(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSwap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSwap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateAtomicSwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSwap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateAtomicSwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateAtomicSwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientOtherChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientOtherChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderOtherChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderOtherChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomNumberHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandomNumberHash = append(m.RandomNumberHash[:0], dAtA[iNdEx:postIndex]...)
			if m.RandomNumberHash == nil {
				m.RandomNumberHash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeSpan", wireType)
			}
			m.TimeSpan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeSpan |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSwap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSwap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimAtomicSwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSwap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimAtomicSwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimAtomicSwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwapID = append(m.SwapID[:0], dAtA[iNdEx:postIndex]...)
			if m.SwapID == nil {
				m.SwapID = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomNumber", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandomNumber = append(m.RandomNumber[:0], dAtA[iNdEx:postIndex]...)
			if m.RandomNumber == nil {
				m.RandomNumber = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSwap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSwap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRefundAtomicSwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSwap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRefundAtomicSwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRefundAtomicSwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwapID = append(m.SwapID[:0], dAtA[iNdEx:postIndex]...)
			if m.SwapID == nil {
				m.SwapID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSwap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSwap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrevBlockTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSwap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrevBlockTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrevBlockTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Val, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSwap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSwap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSwap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSwap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSwap
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSwap
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSwap
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSwap        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSwap          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSwap = fmt.Errorf("proto: unexpected end of group")
)
