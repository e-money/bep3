// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bep3/query.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_tendermint_tendermint_libs_bytes "github.com/tendermint/tendermint/libs/bytes"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryAssetSupply contains the params for query 'custom/bep3/supply'
type QueryAssetSupply struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty" yaml:"denom"`
}

func (m *QueryAssetSupply) Reset()         { *m = QueryAssetSupply{} }
func (m *QueryAssetSupply) String() string { return proto.CompactTextString(m) }
func (*QueryAssetSupply) ProtoMessage()    {}
func (*QueryAssetSupply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f793549314fa9524, []int{0}
}
func (m *QueryAssetSupply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetSupply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetSupply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetSupply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetSupply.Merge(m, src)
}
func (m *QueryAssetSupply) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetSupply) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetSupply.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetSupply proto.InternalMessageInfo

func (m *QueryAssetSupply) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// QueryAtomicSwapByID contains the params for query 'custom/bep3/swap'
type QueryAtomicSwapByID struct {
	SwapID github_com_tendermint_tendermint_libs_bytes.HexBytes `protobuf:"bytes,1,opt,name=swap_id,json=swapId,proto3,casttype=github.com/tendermint/tendermint/libs/bytes.HexBytes" json:"swap_id,omitempty" yaml:"swap_id"`
}

func (m *QueryAtomicSwapByID) Reset()         { *m = QueryAtomicSwapByID{} }
func (m *QueryAtomicSwapByID) String() string { return proto.CompactTextString(m) }
func (*QueryAtomicSwapByID) ProtoMessage()    {}
func (*QueryAtomicSwapByID) Descriptor() ([]byte, []int) {
	return fileDescriptor_f793549314fa9524, []int{1}
}
func (m *QueryAtomicSwapByID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAtomicSwapByID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAtomicSwapByID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAtomicSwapByID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAtomicSwapByID.Merge(m, src)
}
func (m *QueryAtomicSwapByID) XXX_Size() int {
	return m.Size()
}
func (m *QueryAtomicSwapByID) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAtomicSwapByID.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAtomicSwapByID proto.InternalMessageInfo

func (m *QueryAtomicSwapByID) GetSwapID() github_com_tendermint_tendermint_libs_bytes.HexBytes {
	if m != nil {
		return m.SwapID
	}
	return nil
}

//
//// QueryAssetSupplies contains the params for an AssetSupplies query
//type QueryAssetSupplies struct {
// Page  int `json:"page" yaml:"page"`
// Limit int `json:"limit" yaml:"limit"`
//}
type QueryAssetSupplies struct {
	Page  int `protobuf:"varint,1,opt,name=page,proto3,casttype=int" json:"page,omitempty" yaml:"page"`
	Limit int `protobuf:"varint,2,opt,name=limit,proto3,casttype=int" json:"limit,omitempty" yaml:"limit"`
}

func (m *QueryAssetSupplies) Reset()         { *m = QueryAssetSupplies{} }
func (m *QueryAssetSupplies) String() string { return proto.CompactTextString(m) }
func (*QueryAssetSupplies) ProtoMessage()    {}
func (*QueryAssetSupplies) Descriptor() ([]byte, []int) {
	return fileDescriptor_f793549314fa9524, []int{2}
}
func (m *QueryAssetSupplies) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetSupplies) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetSupplies.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetSupplies) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetSupplies.Merge(m, src)
}
func (m *QueryAssetSupplies) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetSupplies) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetSupplies.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetSupplies proto.InternalMessageInfo

func (m *QueryAssetSupplies) GetPage() int {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *QueryAssetSupplies) GetLimit() int {
	if m != nil {
		return m.Limit
	}
	return 0
}

// QueryAtomicSwaps contains the params for an AtomicSwaps query
type QueryAtomicSwaps struct {
	Page       int           `protobuf:"varint,1,opt,name=page,proto3,casttype=int" json:"page,omitempty" yaml:"page"`
	Limit      int           `protobuf:"varint,2,opt,name=limit,proto3,casttype=int" json:"limit,omitempty" yaml:"limit"`
	Involve    string        `protobuf:"bytes,3,opt,name=involve,proto3" json:"involve,omitempty" yaml:"involve"`
	Expiration int64         `protobuf:"varint,4,opt,name=expiration,proto3" json:"expiration,omitempty" yaml:"involve"`
	Status     SwapStatus    `protobuf:"varint,5,opt,name=status,proto3,casttype=SwapStatus" json:"status,omitempty" yaml:"status"`
	Direction  SwapDirection `protobuf:"varint,6,opt,name=direction,proto3,casttype=SwapDirection" json:"direction,omitempty" yaml:"direction"`
}

func (m *QueryAtomicSwaps) Reset()         { *m = QueryAtomicSwaps{} }
func (m *QueryAtomicSwaps) String() string { return proto.CompactTextString(m) }
func (*QueryAtomicSwaps) ProtoMessage()    {}
func (*QueryAtomicSwaps) Descriptor() ([]byte, []int) {
	return fileDescriptor_f793549314fa9524, []int{3}
}
func (m *QueryAtomicSwaps) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAtomicSwaps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAtomicSwaps.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAtomicSwaps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAtomicSwaps.Merge(m, src)
}
func (m *QueryAtomicSwaps) XXX_Size() int {
	return m.Size()
}
func (m *QueryAtomicSwaps) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAtomicSwaps.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAtomicSwaps proto.InternalMessageInfo

func (m *QueryAtomicSwaps) GetPage() int {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *QueryAtomicSwaps) GetLimit() int {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *QueryAtomicSwaps) GetInvolve() string {
	if m != nil {
		return m.Involve
	}
	return ""
}

func (m *QueryAtomicSwaps) GetExpiration() int64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

func (m *QueryAtomicSwaps) GetStatus() SwapStatus {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *QueryAtomicSwaps) GetDirection() SwapDirection {
	if m != nil {
		return m.Direction
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryAssetSupply)(nil), "bep3.QueryAssetSupply")
	proto.RegisterType((*QueryAtomicSwapByID)(nil), "bep3.QueryAtomicSwapByID")
	proto.RegisterType((*QueryAssetSupplies)(nil), "bep3.QueryAssetSupplies")
	proto.RegisterType((*QueryAtomicSwaps)(nil), "bep3.QueryAtomicSwaps")
}

func init() { proto.RegisterFile("bep3/query.proto", fileDescriptor_f793549314fa9524) }

var fileDescriptor_f793549314fa9524 = []byte{
	// 444 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x52, 0x3f, 0x8f, 0xd3, 0x30,
	0x14, 0x6f, 0xae, 0x6d, 0x4e, 0x67, 0xae, 0xa8, 0x32, 0x08, 0x22, 0x86, 0xf8, 0x64, 0x01, 0x3a,
	0x21, 0xae, 0x91, 0x38, 0x24, 0xa4, 0x1b, 0x90, 0x08, 0x1d, 0xe8, 0x48, 0xca, 0xc4, 0x82, 0x92,
	0xe6, 0xa9, 0x58, 0x8a, 0x63, 0x13, 0x3b, 0x77, 0x97, 0x9d, 0x0f, 0xc0, 0xc7, 0x62, 0x41, 0xba,
	0x91, 0x29, 0x42, 0xed, 0x37, 0xc8, 0xc8, 0x84, 0xec, 0x24, 0xd7, 0x0a, 0xb1, 0xb2, 0x3d, 0xff,
	0xfe, 0xbc, 0x9f, 0x9f, 0xfd, 0xd0, 0x34, 0x01, 0x79, 0x1e, 0x7c, 0x29, 0xa1, 0xa8, 0x66, 0xb2,
	0x10, 0x5a, 0xe0, 0x91, 0x41, 0x1e, 0xdd, 0x5f, 0x8b, 0xb5, 0xb0, 0x40, 0x60, 0xaa, 0x96, 0xa3,
	0x17, 0x68, 0xfa, 0xde, 0x48, 0xdf, 0x28, 0x05, 0x7a, 0x59, 0x4a, 0x99, 0x55, 0xf8, 0x29, 0x1a,
	0xa7, 0x90, 0x0b, 0xee, 0x39, 0x27, 0xce, 0xe9, 0x51, 0x38, 0x6d, 0x6a, 0x72, 0x5c, 0xc5, 0x3c,
	0xbb, 0xa0, 0x16, 0xa6, 0x51, 0x4b, 0xd3, 0xaf, 0x0e, 0xba, 0xd7, 0x9a, 0xb5, 0xe0, 0x6c, 0xb5,
	0xbc, 0x8a, 0x65, 0x58, 0x2d, 0xe6, 0x98, 0xa3, 0x43, 0x75, 0x15, 0xcb, 0x4f, 0x2c, 0xb5, 0x1d,
	0x8e, 0xc3, 0x0f, 0x9b, 0x9a, 0xb8, 0x86, 0x5e, 0xcc, 0x9b, 0x9a, 0xdc, 0x6d, 0x7b, 0x75, 0x12,
	0xfa, 0xbb, 0x26, 0x2f, 0xd7, 0x4c, 0x7f, 0x2e, 0x93, 0xd9, 0x4a, 0xf0, 0x40, 0x43, 0x9e, 0x42,
	0xc1, 0x59, 0xae, 0xf7, 0xcb, 0x8c, 0x25, 0x2a, 0x48, 0x2a, 0x0d, 0x6a, 0xf6, 0x0e, 0xae, 0x43,
	0x53, 0x44, 0xae, 0xe9, 0xb0, 0x48, 0xa9, 0x40, 0xf8, 0xaf, 0x11, 0x18, 0x28, 0xfc, 0x0c, 0x8d,
	0x64, 0xbc, 0x06, 0x7b, 0x83, 0x61, 0xf8, 0xa0, 0xa9, 0xc9, 0x9d, 0x36, 0xd7, 0xa0, 0x26, 0x74,
	0xc8, 0x72, 0x1d, 0x59, 0x0d, 0x3e, 0x43, 0xe3, 0x8c, 0x71, 0xa6, 0xbd, 0x03, 0x2b, 0x7e, 0xb8,
	0x1b, 0xd8, 0xc2, 0xb7, 0xea, 0x56, 0x45, 0x7f, 0x1c, 0xf4, 0x8f, 0x76, 0x3b, 0xf7, 0xff, 0xcc,
	0xc3, 0xcf, 0xd1, 0x21, 0xcb, 0x2f, 0x45, 0x76, 0x09, 0xde, 0xd0, 0xfe, 0x08, 0xde, 0xbd, 0x62,
	0x47, 0xd0, 0xa8, 0x97, 0xe0, 0x17, 0x08, 0xc1, 0xb5, 0x64, 0x45, 0xac, 0x99, 0xc8, 0xbd, 0x91,
	0x4d, 0xf8, 0x97, 0x61, 0x4f, 0x85, 0x5f, 0x21, 0x57, 0xe9, 0x58, 0x97, 0xca, 0x1b, 0x9f, 0x38,
	0xa7, 0x93, 0x90, 0x34, 0x35, 0x99, 0x74, 0xdf, 0x64, 0x71, 0x73, 0x25, 0x64, 0x06, 0x5d, 0xda,
	0x63, 0xd4, 0xc9, 0xf1, 0x5b, 0x74, 0x94, 0xb2, 0x02, 0x56, 0x36, 0xcb, 0xb5, 0xde, 0x27, 0x4d,
	0x4d, 0xa6, 0xdd, 0xba, 0xf4, 0x94, 0xb1, 0x4f, 0x8c, 0x7d, 0xde, 0x23, 0xd1, 0xce, 0x17, 0xbe,
	0xfe, 0xbe, 0xf1, 0x9d, 0x9b, 0x8d, 0xef, 0xfc, 0xda, 0xf8, 0xce, 0xb7, 0xad, 0x3f, 0xb8, 0xd9,
	0xfa, 0x83, 0x9f, 0x5b, 0x7f, 0xf0, 0xf1, 0xf1, 0xde, 0x62, 0xc0, 0x19, 0x17, 0x39, 0x54, 0x81,
	0x5d, 0x6f, 0x2e, 0xd2, 0x32, 0x83, 0x40, 0x57, 0x12, 0x54, 0xe2, 0xda, 0x55, 0x3e, 0xff, 0x13,
	0x00, 0x00, 0xff, 0xff, 0x61, 0x49, 0xf3, 0xc3, 0xfa, 0x02, 0x00, 0x00,
}

func (m *QueryAssetSupply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetSupply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetSupply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAtomicSwapByID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAtomicSwapByID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAtomicSwapByID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SwapID) > 0 {
		i -= len(m.SwapID)
		copy(dAtA[i:], m.SwapID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SwapID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAssetSupplies) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetSupplies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetSupplies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAtomicSwaps) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAtomicSwaps) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAtomicSwaps) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Direction != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Direction))
		i--
		dAtA[i] = 0x30
	}
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.Expiration != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Expiration))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Involve) > 0 {
		i -= len(m.Involve)
		copy(dAtA[i:], m.Involve)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Involve)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Limit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryAssetSupply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAtomicSwapByID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SwapID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAssetSupplies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovQuery(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovQuery(uint64(m.Limit))
	}
	return n
}

func (m *QueryAtomicSwaps) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovQuery(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovQuery(uint64(m.Limit))
	}
	l = len(m.Involve)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Expiration != 0 {
		n += 1 + sovQuery(uint64(m.Expiration))
	}
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	if m.Direction != 0 {
		n += 1 + sovQuery(uint64(m.Direction))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryAssetSupply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetSupply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetSupply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAtomicSwapByID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAtomicSwapByID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAtomicSwapByID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwapID = append(m.SwapID[:0], dAtA[iNdEx:postIndex]...)
			if m.SwapID == nil {
				m.SwapID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssetSupplies) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetSupplies: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetSupplies: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAtomicSwaps) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAtomicSwaps: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAtomicSwaps: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Involve", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Involve = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			m.Expiration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SwapStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direction |= SwapDirection(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
