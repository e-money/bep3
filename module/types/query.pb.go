// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bep3/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	github_com_tendermint_tendermint_libs_bytes "github.com/tendermint/tendermint/libs/bytes"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// gRPC asset req
type QueryAssetSupplyRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty" yaml:"denom"`
}

func (m *QueryAssetSupplyRequest) Reset()         { *m = QueryAssetSupplyRequest{} }
func (m *QueryAssetSupplyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAssetSupplyRequest) ProtoMessage()    {}
func (*QueryAssetSupplyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f793549314fa9524, []int{0}
}
func (m *QueryAssetSupplyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetSupplyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetSupplyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetSupplyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetSupplyRequest.Merge(m, src)
}
func (m *QueryAssetSupplyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetSupplyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetSupplyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetSupplyRequest proto.InternalMessageInfo

func (m *QueryAssetSupplyRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// gRPC asset supply response
type QueryAssetSupplyResponse struct {
	Supply AssetSupply `protobuf:"bytes,1,opt,name=supply,proto3" json:"supply" yaml:"supply"`
}

func (m *QueryAssetSupplyResponse) Reset()         { *m = QueryAssetSupplyResponse{} }
func (m *QueryAssetSupplyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAssetSupplyResponse) ProtoMessage()    {}
func (*QueryAssetSupplyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f793549314fa9524, []int{1}
}
func (m *QueryAssetSupplyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetSupplyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetSupplyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetSupplyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetSupplyResponse.Merge(m, src)
}
func (m *QueryAssetSupplyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetSupplyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetSupplyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetSupplyResponse proto.InternalMessageInfo

func (m *QueryAssetSupplyResponse) GetSupply() AssetSupply {
	if m != nil {
		return m.Supply
	}
	return AssetSupply{}
}

// gRPC assets req
type QueryAssetSuppliesRequest struct {
}

func (m *QueryAssetSuppliesRequest) Reset()         { *m = QueryAssetSuppliesRequest{} }
func (m *QueryAssetSuppliesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAssetSuppliesRequest) ProtoMessage()    {}
func (*QueryAssetSuppliesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f793549314fa9524, []int{2}
}
func (m *QueryAssetSuppliesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetSuppliesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetSuppliesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetSuppliesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetSuppliesRequest.Merge(m, src)
}
func (m *QueryAssetSuppliesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetSuppliesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetSuppliesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetSuppliesRequest proto.InternalMessageInfo

// gRPC asset supplies response
type QueryAssetSuppliesResponse struct {
	Supplies AssetSupplies `protobuf:"bytes,1,opt,name=supplies,proto3" json:"supplies" yaml:"supplies"`
}

func (m *QueryAssetSuppliesResponse) Reset()         { *m = QueryAssetSuppliesResponse{} }
func (m *QueryAssetSuppliesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAssetSuppliesResponse) ProtoMessage()    {}
func (*QueryAssetSuppliesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f793549314fa9524, []int{3}
}
func (m *QueryAssetSuppliesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetSuppliesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetSuppliesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetSuppliesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetSuppliesResponse.Merge(m, src)
}
func (m *QueryAssetSuppliesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetSuppliesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetSuppliesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetSuppliesResponse proto.InternalMessageInfo

func (m *QueryAssetSuppliesResponse) GetSupplies() AssetSupplies {
	if m != nil {
		return m.Supplies
	}
	return AssetSupplies{}
}

// gRPC swap req
type QuerySwapRequest struct {
	SwapID github_com_tendermint_tendermint_libs_bytes.HexBytes `protobuf:"bytes,1,opt,name=swap_id,json=swapId,proto3,casttype=github.com/tendermint/tendermint/libs/bytes.HexBytes" json:"swap_id,omitempty" yaml:"swap_id"`
}

func (m *QuerySwapRequest) Reset()         { *m = QuerySwapRequest{} }
func (m *QuerySwapRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySwapRequest) ProtoMessage()    {}
func (*QuerySwapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f793549314fa9524, []int{4}
}
func (m *QuerySwapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySwapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySwapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySwapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySwapRequest.Merge(m, src)
}
func (m *QuerySwapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySwapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySwapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySwapRequest proto.InternalMessageInfo

func (m *QuerySwapRequest) GetSwapID() github_com_tendermint_tendermint_libs_bytes.HexBytes {
	if m != nil {
		return m.SwapID
	}
	return nil
}

// gRPC swap response
type QuerySwapResponse struct {
	Swap AtomicSwap `protobuf:"bytes,1,opt,name=swap,proto3" json:"swap" yaml:"swap"`
}

func (m *QuerySwapResponse) Reset()         { *m = QuerySwapResponse{} }
func (m *QuerySwapResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySwapResponse) ProtoMessage()    {}
func (*QuerySwapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f793549314fa9524, []int{5}
}
func (m *QuerySwapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySwapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySwapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySwapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySwapResponse.Merge(m, src)
}
func (m *QuerySwapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySwapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySwapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySwapResponse proto.InternalMessageInfo

func (m *QuerySwapResponse) GetSwap() AtomicSwap {
	if m != nil {
		return m.Swap
	}
	return AtomicSwap{}
}

// gRPC swaps req
type QuerySwapsRequest struct {
	Params *QueryAtomicSwaps `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty" yaml:"params"`
}

func (m *QuerySwapsRequest) Reset()         { *m = QuerySwapsRequest{} }
func (m *QuerySwapsRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySwapsRequest) ProtoMessage()    {}
func (*QuerySwapsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f793549314fa9524, []int{6}
}
func (m *QuerySwapsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySwapsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySwapsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySwapsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySwapsRequest.Merge(m, src)
}
func (m *QuerySwapsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySwapsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySwapsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySwapsRequest proto.InternalMessageInfo

func (m *QuerySwapsRequest) GetParams() *QueryAtomicSwaps {
	if m != nil {
		return m.Params
	}
	return nil
}

// gRPC swap response
type QuerySwapsResponse struct {
	Swaps AugmentedAtomicSwaps `protobuf:"bytes,1,opt,name=swaps,proto3" json:"swaps" yaml:"swaps"`
}

func (m *QuerySwapsResponse) Reset()         { *m = QuerySwapsResponse{} }
func (m *QuerySwapsResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySwapsResponse) ProtoMessage()    {}
func (*QuerySwapsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f793549314fa9524, []int{7}
}
func (m *QuerySwapsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySwapsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySwapsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySwapsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySwapsResponse.Merge(m, src)
}
func (m *QuerySwapsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySwapsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySwapsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySwapsResponse proto.InternalMessageInfo

func (m *QuerySwapsResponse) GetSwaps() AugmentedAtomicSwaps {
	if m != nil {
		return m.Swaps
	}
	return AugmentedAtomicSwaps{}
}

// QueryAssetSupply contains the params for query 'custom/bep3/supply'
type QueryAssetSupply struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty" yaml:"denom"`
}

func (m *QueryAssetSupply) Reset()         { *m = QueryAssetSupply{} }
func (m *QueryAssetSupply) String() string { return proto.CompactTextString(m) }
func (*QueryAssetSupply) ProtoMessage()    {}
func (*QueryAssetSupply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f793549314fa9524, []int{8}
}
func (m *QueryAssetSupply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetSupply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetSupply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetSupply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetSupply.Merge(m, src)
}
func (m *QueryAssetSupply) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetSupply) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetSupply.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetSupply proto.InternalMessageInfo

func (m *QueryAssetSupply) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// QueryAtomicSwapByID contains the params for query 'custom/bep3/swap'
type QueryAtomicSwapByID struct {
	SwapID github_com_tendermint_tendermint_libs_bytes.HexBytes `protobuf:"bytes,1,opt,name=swap_id,json=swapId,proto3,casttype=github.com/tendermint/tendermint/libs/bytes.HexBytes" json:"swap_id,omitempty" yaml:"swap_id"`
}

func (m *QueryAtomicSwapByID) Reset()         { *m = QueryAtomicSwapByID{} }
func (m *QueryAtomicSwapByID) String() string { return proto.CompactTextString(m) }
func (*QueryAtomicSwapByID) ProtoMessage()    {}
func (*QueryAtomicSwapByID) Descriptor() ([]byte, []int) {
	return fileDescriptor_f793549314fa9524, []int{9}
}
func (m *QueryAtomicSwapByID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAtomicSwapByID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAtomicSwapByID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAtomicSwapByID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAtomicSwapByID.Merge(m, src)
}
func (m *QueryAtomicSwapByID) XXX_Size() int {
	return m.Size()
}
func (m *QueryAtomicSwapByID) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAtomicSwapByID.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAtomicSwapByID proto.InternalMessageInfo

func (m *QueryAtomicSwapByID) GetSwapID() github_com_tendermint_tendermint_libs_bytes.HexBytes {
	if m != nil {
		return m.SwapID
	}
	return nil
}

//
//// QueryAssetSupplies contains the params for an AssetSupplies query
//type QueryAssetSupplies struct {
// Page  int `json:"page" yaml:"page"`
// Limit int `json:"limit" yaml:"limit"`
//}
type QueryAssetSupplies struct {
	Page  int `protobuf:"varint,1,opt,name=page,proto3,casttype=int" json:"page,omitempty" yaml:"page"`
	Limit int `protobuf:"varint,2,opt,name=limit,proto3,casttype=int" json:"limit,omitempty" yaml:"limit"`
}

func (m *QueryAssetSupplies) Reset()         { *m = QueryAssetSupplies{} }
func (m *QueryAssetSupplies) String() string { return proto.CompactTextString(m) }
func (*QueryAssetSupplies) ProtoMessage()    {}
func (*QueryAssetSupplies) Descriptor() ([]byte, []int) {
	return fileDescriptor_f793549314fa9524, []int{10}
}
func (m *QueryAssetSupplies) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetSupplies) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetSupplies.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetSupplies) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetSupplies.Merge(m, src)
}
func (m *QueryAssetSupplies) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetSupplies) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetSupplies.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetSupplies proto.InternalMessageInfo

func (m *QueryAssetSupplies) GetPage() int {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *QueryAssetSupplies) GetLimit() int {
	if m != nil {
		return m.Limit
	}
	return 0
}

// QueryAtomicSwaps contains the params for an AtomicSwaps query
type QueryAtomicSwaps struct {
	Page       int           `protobuf:"varint,1,opt,name=page,proto3,casttype=int" json:"page,omitempty" yaml:"page"`
	Limit      int           `protobuf:"varint,2,opt,name=limit,proto3,casttype=int" json:"limit,omitempty" yaml:"limit"`
	Involve    string        `protobuf:"bytes,3,opt,name=involve,proto3" json:"involve,omitempty" yaml:"involve"`
	Expiration int64         `protobuf:"varint,4,opt,name=expiration,proto3" json:"expiration,omitempty" yaml:"involve"`
	Status     SwapStatus    `protobuf:"varint,5,opt,name=status,proto3,casttype=SwapStatus" json:"status,omitempty" yaml:"status"`
	Direction  SwapDirection `protobuf:"varint,6,opt,name=direction,proto3,casttype=SwapDirection" json:"direction,omitempty" yaml:"direction"`
}

func (m *QueryAtomicSwaps) Reset()         { *m = QueryAtomicSwaps{} }
func (m *QueryAtomicSwaps) String() string { return proto.CompactTextString(m) }
func (*QueryAtomicSwaps) ProtoMessage()    {}
func (*QueryAtomicSwaps) Descriptor() ([]byte, []int) {
	return fileDescriptor_f793549314fa9524, []int{11}
}
func (m *QueryAtomicSwaps) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAtomicSwaps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAtomicSwaps.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAtomicSwaps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAtomicSwaps.Merge(m, src)
}
func (m *QueryAtomicSwaps) XXX_Size() int {
	return m.Size()
}
func (m *QueryAtomicSwaps) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAtomicSwaps.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAtomicSwaps proto.InternalMessageInfo

func (m *QueryAtomicSwaps) GetPage() int {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *QueryAtomicSwaps) GetLimit() int {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *QueryAtomicSwaps) GetInvolve() string {
	if m != nil {
		return m.Involve
	}
	return ""
}

func (m *QueryAtomicSwaps) GetExpiration() int64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

func (m *QueryAtomicSwaps) GetStatus() SwapStatus {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *QueryAtomicSwaps) GetDirection() SwapDirection {
	if m != nil {
		return m.Direction
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryAssetSupplyRequest)(nil), "bep3.QueryAssetSupplyRequest")
	proto.RegisterType((*QueryAssetSupplyResponse)(nil), "bep3.QueryAssetSupplyResponse")
	proto.RegisterType((*QueryAssetSuppliesRequest)(nil), "bep3.QueryAssetSuppliesRequest")
	proto.RegisterType((*QueryAssetSuppliesResponse)(nil), "bep3.QueryAssetSuppliesResponse")
	proto.RegisterType((*QuerySwapRequest)(nil), "bep3.QuerySwapRequest")
	proto.RegisterType((*QuerySwapResponse)(nil), "bep3.QuerySwapResponse")
	proto.RegisterType((*QuerySwapsRequest)(nil), "bep3.QuerySwapsRequest")
	proto.RegisterType((*QuerySwapsResponse)(nil), "bep3.QuerySwapsResponse")
	proto.RegisterType((*QueryAssetSupply)(nil), "bep3.QueryAssetSupply")
	proto.RegisterType((*QueryAtomicSwapByID)(nil), "bep3.QueryAtomicSwapByID")
	proto.RegisterType((*QueryAssetSupplies)(nil), "bep3.QueryAssetSupplies")
	proto.RegisterType((*QueryAtomicSwaps)(nil), "bep3.QueryAtomicSwaps")
}

func init() { proto.RegisterFile("bep3/query.proto", fileDescriptor_f793549314fa9524) }

var fileDescriptor_f793549314fa9524 = []byte{
	// 811 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xcf, 0x6f, 0xdb, 0x36,
	0x14, 0xb6, 0xe2, 0x1f, 0x59, 0x98, 0x78, 0x71, 0x18, 0xcf, 0xd6, 0xb4, 0x4c, 0x0a, 0x88, 0x6d,
	0x08, 0x86, 0xc5, 0x42, 0x92, 0x01, 0xc3, 0x72, 0x18, 0x16, 0x2d, 0x18, 0x92, 0x4b, 0x81, 0xca,
	0x45, 0x0e, 0x45, 0x80, 0x42, 0xb6, 0x59, 0x95, 0x85, 0x25, 0x2a, 0x26, 0x9d, 0xc4, 0xc7, 0x16,
	0xfd, 0x03, 0x0a, 0xb4, 0x7f, 0x54, 0x2e, 0x05, 0x02, 0xf4, 0xd2, 0x93, 0x51, 0x38, 0xfd, 0x0b,
	0x7c, 0xec, 0xa9, 0x20, 0x45, 0x59, 0x8a, 0xed, 0xa0, 0xbd, 0xb4, 0x37, 0xf9, 0xbd, 0xef, 0x7d,
	0xdf, 0xc7, 0xc7, 0xc7, 0x67, 0x50, 0x69, 0xe1, 0x68, 0xcf, 0x3e, 0xeb, 0xe3, 0xde, 0xa0, 0x11,
	0xf5, 0x28, 0xa7, 0xb0, 0x20, 0x22, 0x46, 0xd5, 0xa7, 0x3e, 0x95, 0x01, 0x5b, 0x7c, 0xc5, 0x39,
	0x63, 0xc3, 0xa7, 0xd4, 0xef, 0x62, 0xdb, 0x8b, 0x88, 0xed, 0x85, 0x21, 0xe5, 0x1e, 0x27, 0x34,
	0x64, 0x2a, 0x6b, 0xb6, 0x29, 0x0b, 0x28, 0xb3, 0x5b, 0x1e, 0xc3, 0xf6, 0xf9, 0x4e, 0x0b, 0x73,
	0x6f, 0xc7, 0x6e, 0x53, 0x12, 0xaa, 0x3c, 0x94, 0x5a, 0x3e, 0x0e, 0x31, 0x23, 0x49, 0xcd, 0xaa,
	0x8c, 0xb1, 0x0b, 0x2f, 0x8a, 0x03, 0xe8, 0x00, 0xd4, 0xef, 0x0b, 0x37, 0x07, 0x8c, 0x61, 0xde,
	0xec, 0x47, 0x51, 0x77, 0xe0, 0xe2, 0xb3, 0x3e, 0x66, 0x1c, 0xfe, 0x06, 0x8a, 0x1d, 0x1c, 0xd2,
	0x40, 0xd7, 0x36, 0xb5, 0xad, 0x25, 0xa7, 0x32, 0x1e, 0x5a, 0x2b, 0x03, 0x2f, 0xe8, 0xee, 0x23,
	0x19, 0x46, 0x6e, 0x9c, 0x46, 0xa7, 0x40, 0x9f, 0xa5, 0x60, 0x11, 0x0d, 0x19, 0x86, 0xff, 0x82,
	0x12, 0x93, 0x11, 0x49, 0xb2, 0xbc, 0xbb, 0xd6, 0x10, 0x06, 0x1a, 0x19, 0xa8, 0xf3, 0xc3, 0xd5,
	0xd0, 0xca, 0x8d, 0x87, 0x56, 0x39, 0xe6, 0x8e, 0xe1, 0xc8, 0x55, 0x75, 0xe8, 0x27, 0xf0, 0xe3,
	0x14, 0x3b, 0xc1, 0x4c, 0x59, 0x44, 0x8f, 0x81, 0x31, 0x2f, 0xa9, 0xc4, 0x8f, 0xc0, 0x77, 0x4c,
	0xc5, 0x94, 0xfc, 0xfa, 0xb4, 0x3c, 0xc1, 0xcc, 0xa9, 0x2b, 0x03, 0xab, 0x19, 0x03, 0x04, 0x33,
	0xe4, 0x4e, 0xaa, 0xd1, 0x33, 0x0d, 0x54, 0xa4, 0x50, 0xf3, 0xc2, 0x8b, 0x92, 0xfe, 0x04, 0x60,
	0x51, 0x34, 0xf2, 0x11, 0xe9, 0x48, 0xf6, 0x15, 0xe7, 0xc1, 0x68, 0x68, 0x95, 0x04, 0xe2, 0xf8,
	0x70, 0x3c, 0xb4, 0xbe, 0x57, 0x74, 0x31, 0x04, 0x7d, 0x1c, 0x5a, 0x7f, 0xfa, 0x84, 0x3f, 0xe9,
	0xb7, 0x1a, 0x6d, 0x1a, 0xd8, 0x1c, 0x87, 0x1d, 0xdc, 0x0b, 0x48, 0xc8, 0xb3, 0x9f, 0x5d, 0xd2,
	0x62, 0x76, 0x6b, 0xc0, 0x31, 0x6b, 0x1c, 0xe1, 0x4b, 0x47, 0x7c, 0xb8, 0x25, 0xc1, 0x70, 0xdc,
	0x41, 0xf7, 0xc0, 0x5a, 0xc6, 0x82, 0x3a, 0xe2, 0xdf, 0xa0, 0x20, 0xd2, 0xea, 0x78, 0x15, 0x75,
	0x3c, 0x4e, 0x03, 0xd2, 0x16, 0x38, 0x67, 0x5d, 0x9d, 0x6d, 0x39, 0x35, 0x83, 0x5c, 0x59, 0x82,
	0x4e, 0x32, 0x7c, 0x49, 0x43, 0xe1, 0x01, 0x28, 0x45, 0x5e, 0xcf, 0x0b, 0x92, 0x86, 0xd5, 0x62,
	0xc6, 0xb8, 0xc9, 0x13, 0x5a, 0xe6, 0xac, 0xa5, 0x17, 0x16, 0xe3, 0x91, 0xab, 0x0a, 0xd1, 0x29,
	0x80, 0x59, 0x5e, 0x65, 0xf4, 0x7f, 0x50, 0x14, 0xaa, 0x09, 0xaf, 0xa1, 0x9c, 0xf6, 0xfd, 0x00,
	0x87, 0x1c, 0x77, 0xb2, 0xdc, 0x55, 0xe5, 0x79, 0x25, 0xf5, 0xcc, 0x90, 0x1b, 0x97, 0xa3, 0x7d,
	0x75, 0x11, 0x99, 0x09, 0xfa, 0xe2, 0x41, 0x7d, 0xa1, 0x81, 0xf5, 0xa9, 0x93, 0x38, 0x83, 0xe3,
	0xc3, 0x6f, 0x7d, 0x91, 0x54, 0x35, 0xe8, 0xd6, 0x14, 0xc2, 0xdf, 0x41, 0x21, 0xf2, 0x7c, 0x2c,
	0x1d, 0xe4, 0x9d, 0x5a, 0x7a, 0x67, 0x22, 0x2a, 0x44, 0xf3, 0x24, 0xe4, 0xae, 0xc4, 0xc0, 0x6d,
	0x50, 0xec, 0x92, 0x80, 0x70, 0x7d, 0x41, 0x82, 0xeb, 0xe9, 0x81, 0x65, 0x78, 0x82, 0x8e, 0x51,
	0xe8, 0xcd, 0x42, 0xd2, 0xb4, 0xb4, 0xcb, 0x5f, 0x51, 0x0f, 0xfe, 0x01, 0x16, 0x49, 0x78, 0x4e,
	0xbb, 0xe7, 0x58, 0xcf, 0xcb, 0x1b, 0x81, 0x69, 0x17, 0x55, 0x02, 0xb9, 0x09, 0x04, 0xee, 0x02,
	0x80, 0x2f, 0x23, 0xd2, 0x93, 0xbb, 0x4d, 0x2f, 0x48, 0x85, 0x79, 0x05, 0x19, 0x14, 0xfc, 0x0b,
	0x94, 0x18, 0xf7, 0x78, 0x9f, 0xe9, 0xc5, 0x4d, 0x6d, 0xab, 0xec, 0x58, 0x99, 0xfd, 0x21, 0xe3,
	0xc2, 0x12, 0x10, 0x07, 0x6d, 0xca, 0x9f, 0xae, 0x82, 0xc3, 0xff, 0xc0, 0x52, 0x87, 0xf4, 0x70,
	0x5b, 0x6a, 0x95, 0x64, 0xed, 0xaf, 0xe3, 0xa1, 0x55, 0x51, 0xe3, 0x92, 0xa4, 0x44, 0x79, 0x59,
	0x94, 0x1f, 0x26, 0x11, 0x37, 0xad, 0xdb, 0x7d, 0x9d, 0x07, 0x45, 0xd9, 0x4f, 0xf8, 0x14, 0x2c,
	0x67, 0x07, 0xf1, 0xe7, 0xec, 0x6b, 0x99, 0x59, 0xa8, 0x86, 0x79, 0x57, 0x3a, 0x7e, 0x23, 0x68,
	0xe3, 0xf9, 0xdb, 0x0f, 0xaf, 0x16, 0x6a, 0xb0, 0x6a, 0xe3, 0xed, 0x80, 0x86, 0x78, 0x60, 0xc7,
	0xdb, 0x3a, 0x26, 0xef, 0x81, 0xf2, 0xed, 0x89, 0xb1, 0xe6, 0xd2, 0xa5, 0xdb, 0xd1, 0xd8, 0xbc,
	0x1b, 0xa0, 0x14, 0x4d, 0xa9, 0xa8, 0xc3, 0xda, 0x1c, 0x45, 0x21, 0xd1, 0x04, 0x05, 0xd1, 0x05,
	0x98, 0x5d, 0x03, 0x99, 0x15, 0x68, 0xd4, 0x67, 0xe2, 0x8a, 0xd8, 0x90, 0xc4, 0x55, 0x08, 0xa7,
	0x88, 0x05, 0xd9, 0x09, 0x28, 0xc6, 0x23, 0x38, 0x5d, 0x3d, 0x31, 0xae, 0xcf, 0x26, 0x3e, 0xcf,
	0xeb, 0xfc, 0x73, 0x35, 0x32, 0xb5, 0xeb, 0x91, 0xa9, 0xbd, 0x1f, 0x99, 0xda, 0xcb, 0x1b, 0x33,
	0x77, 0x7d, 0x63, 0xe6, 0xde, 0xdd, 0x98, 0xb9, 0x87, 0xbf, 0x64, 0xde, 0xeb, 0xad, 0xba, 0x80,
	0x76, 0xfa, 0x5d, 0x6c, 0xf3, 0x41, 0x84, 0x59, 0xab, 0x24, 0xff, 0x11, 0xf7, 0x3e, 0x05, 0x00,
	0x00, 0xff, 0xff, 0x8a, 0x11, 0xd9, 0xba, 0xa4, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	AssetSupply(ctx context.Context, in *QueryAssetSupplyRequest, opts ...grpc.CallOption) (*QueryAssetSupplyResponse, error)
	AssetSupplies(ctx context.Context, in *QueryAssetSuppliesRequest, opts ...grpc.CallOption) (*QueryAssetSuppliesResponse, error)
	Swap(ctx context.Context, in *QuerySwapRequest, opts ...grpc.CallOption) (*QuerySwapResponse, error)
	Swaps(ctx context.Context, in *QuerySwapsRequest, opts ...grpc.CallOption) (*QuerySwapsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) AssetSupply(ctx context.Context, in *QueryAssetSupplyRequest, opts ...grpc.CallOption) (*QueryAssetSupplyResponse, error) {
	out := new(QueryAssetSupplyResponse)
	err := c.cc.Invoke(ctx, "/bep3.Query/AssetSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AssetSupplies(ctx context.Context, in *QueryAssetSuppliesRequest, opts ...grpc.CallOption) (*QueryAssetSuppliesResponse, error) {
	out := new(QueryAssetSuppliesResponse)
	err := c.cc.Invoke(ctx, "/bep3.Query/AssetSupplies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Swap(ctx context.Context, in *QuerySwapRequest, opts ...grpc.CallOption) (*QuerySwapResponse, error) {
	out := new(QuerySwapResponse)
	err := c.cc.Invoke(ctx, "/bep3.Query/Swap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Swaps(ctx context.Context, in *QuerySwapsRequest, opts ...grpc.CallOption) (*QuerySwapsResponse, error) {
	out := new(QuerySwapsResponse)
	err := c.cc.Invoke(ctx, "/bep3.Query/Swaps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	AssetSupply(context.Context, *QueryAssetSupplyRequest) (*QueryAssetSupplyResponse, error)
	AssetSupplies(context.Context, *QueryAssetSuppliesRequest) (*QueryAssetSuppliesResponse, error)
	Swap(context.Context, *QuerySwapRequest) (*QuerySwapResponse, error)
	Swaps(context.Context, *QuerySwapsRequest) (*QuerySwapsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) AssetSupply(ctx context.Context, req *QueryAssetSupplyRequest) (*QueryAssetSupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetSupply not implemented")
}
func (*UnimplementedQueryServer) AssetSupplies(ctx context.Context, req *QueryAssetSuppliesRequest) (*QueryAssetSuppliesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetSupplies not implemented")
}
func (*UnimplementedQueryServer) Swap(ctx context.Context, req *QuerySwapRequest) (*QuerySwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Swap not implemented")
}
func (*UnimplementedQueryServer) Swaps(ctx context.Context, req *QuerySwapsRequest) (*QuerySwapsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Swaps not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_AssetSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAssetSupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AssetSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bep3.Query/AssetSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AssetSupply(ctx, req.(*QueryAssetSupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AssetSupplies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAssetSuppliesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AssetSupplies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bep3.Query/AssetSupplies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AssetSupplies(ctx, req.(*QueryAssetSuppliesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Swap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Swap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bep3.Query/Swap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Swap(ctx, req.(*QuerySwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Swaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySwapsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Swaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bep3.Query/Swaps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Swaps(ctx, req.(*QuerySwapsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bep3.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssetSupply",
			Handler:    _Query_AssetSupply_Handler,
		},
		{
			MethodName: "AssetSupplies",
			Handler:    _Query_AssetSupplies_Handler,
		},
		{
			MethodName: "Swap",
			Handler:    _Query_Swap_Handler,
		},
		{
			MethodName: "Swaps",
			Handler:    _Query_Swaps_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bep3/query.proto",
}

func (m *QueryAssetSupplyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetSupplyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetSupplyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAssetSupplyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetSupplyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetSupplyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Supply.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAssetSuppliesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetSuppliesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetSuppliesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAssetSuppliesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetSuppliesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetSuppliesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Supplies.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuerySwapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySwapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySwapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SwapID) > 0 {
		i -= len(m.SwapID)
		copy(dAtA[i:], m.SwapID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SwapID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySwapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySwapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySwapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Swap.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuerySwapsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySwapsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySwapsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySwapsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySwapsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySwapsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Swaps.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAssetSupply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetSupply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetSupply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAtomicSwapByID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAtomicSwapByID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAtomicSwapByID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SwapID) > 0 {
		i -= len(m.SwapID)
		copy(dAtA[i:], m.SwapID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SwapID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAssetSupplies) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetSupplies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetSupplies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAtomicSwaps) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAtomicSwaps) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAtomicSwaps) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Direction != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Direction))
		i--
		dAtA[i] = 0x30
	}
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.Expiration != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Expiration))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Involve) > 0 {
		i -= len(m.Involve)
		copy(dAtA[i:], m.Involve)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Involve)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Limit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryAssetSupplyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAssetSupplyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Supply.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAssetSuppliesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAssetSuppliesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Supplies.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QuerySwapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SwapID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySwapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Swap.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QuerySwapsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySwapsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Swaps.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAssetSupply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAtomicSwapByID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SwapID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAssetSupplies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovQuery(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovQuery(uint64(m.Limit))
	}
	return n
}

func (m *QueryAtomicSwaps) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovQuery(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovQuery(uint64(m.Limit))
	}
	l = len(m.Involve)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Expiration != 0 {
		n += 1 + sovQuery(uint64(m.Expiration))
	}
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	if m.Direction != 0 {
		n += 1 + sovQuery(uint64(m.Direction))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryAssetSupplyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetSupplyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetSupplyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssetSupplyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetSupplyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetSupplyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Supply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssetSuppliesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetSuppliesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetSuppliesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssetSuppliesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetSuppliesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetSuppliesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supplies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Supplies.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySwapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySwapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySwapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwapID = append(m.SwapID[:0], dAtA[iNdEx:postIndex]...)
			if m.SwapID == nil {
				m.SwapID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySwapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySwapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySwapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Swap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySwapsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySwapsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySwapsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &QueryAtomicSwaps{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySwapsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySwapsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySwapsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swaps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Swaps.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssetSupply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetSupply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetSupply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAtomicSwapByID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAtomicSwapByID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAtomicSwapByID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwapID = append(m.SwapID[:0], dAtA[iNdEx:postIndex]...)
			if m.SwapID == nil {
				m.SwapID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssetSupplies) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetSupplies: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetSupplies: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAtomicSwaps) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAtomicSwaps: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAtomicSwaps: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Involve", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Involve = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			m.Expiration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SwapStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direction |= SwapDirection(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
