// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bep3/genesis.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"

	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/golang/protobuf/ptypes/timestamp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SupplyLimit parameters that control the absolute and time-based limits for an assets's supply
type SupplyLimit struct {
	// the absolute supply limit for an asset
	Limit github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=limit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"limit" yaml:"limit"`
	// boolean for whether the supply is limited by time
	TimeLimited bool `protobuf:"varint,2,opt,name=time_limited,json=timeLimited,proto3" json:"time_limited,omitempty" yaml:"time_limited"`
	// the duration for which the supply time limit applies
	TimePeriod time.Duration `protobuf:"bytes,3,opt,name=time_period,json=timePeriod,proto3,stdduration" json:"time_period" yaml:"time_period"`
	// the supply limit for an asset for each time period
	TimeBasedLimit github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=time_based_limit,json=timeBasedLimit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"time_based_limit" yaml:"time_based_limit"`
}

func (m *SupplyLimit) Reset()      { *m = SupplyLimit{} }
func (*SupplyLimit) ProtoMessage() {}
func (*SupplyLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd4db49772fc257b, []int{0}
}
func (m *SupplyLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SupplyLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SupplyLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SupplyLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SupplyLimit.Merge(m, src)
}
func (m *SupplyLimit) XXX_Size() int {
	return m.Size()
}
func (m *SupplyLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_SupplyLimit.DiscardUnknown(m)
}

var xxx_messageInfo_SupplyLimit proto.InternalMessageInfo

func (m *SupplyLimit) GetTimeLimited() bool {
	if m != nil {
		return m.TimeLimited
	}
	return false
}

func (m *SupplyLimit) GetTimePeriod() time.Duration {
	if m != nil {
		return m.TimePeriod
	}
	return 0
}

// AssetParam parameters that must be specified for each bep3 asset
type AssetParam struct {
	// name of the asset
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty" yaml:"denom"`
	// SLIP-0044 registered coin type - see https://github.com/satoshilabs/slips/blob/master/slip-0044.md
	CoinID int `protobuf:"varint,2,opt,name=coin_id,json=coinId,proto3,casttype=int" json:"coin_id,omitempty" yaml:"coin_id"`
	// asset supply limit
	SupplyLimit SupplyLimit `protobuf:"bytes,3,opt,name=supply_limit,json=supplyLimit,proto3" json:"supply_limit" yaml:"supply_limit"`
	// denotes if asset is available or paused
	Active bool `protobuf:"varint,4,opt,name=active,proto3" json:"active,omitempty" yaml:"active"`
	// the address of the relayer process
	DeputyAddress string `protobuf:"bytes,5,opt,name=deputy_address,json=deputyAddress,proto3" json:"deputy_address,omitempty" yaml:"deputy_address"`
	// It should match the deputy config chain values. The fixed fee charged by the relayer process for outgoing swaps
	FixedFee github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=fixed_fee,json=fixedFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"fixed_fee" yaml:"fixed_fee"`
	// Minimum swap amount
	MinSwapAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,7,opt,name=min_swap_amount,json=minSwapAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"min_swap_amount" yaml:"min_swap_amount"`
	// Maximum swap amount
	MaxSwapAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,8,opt,name=max_swap_amount,json=maxSwapAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"max_swap_amount" yaml:"min_swap_amount"`
	// Unix seconds of swap creation block timestamp
	// Original	SwapTimestamp int64 `json:"swap_time" yaml:"swap_time"`
	SwapTimestamp int64 `protobuf:"varint,9,opt,name=swap_time,json=swapTime,proto3" json:"swap_time,omitempty" yaml:"swap_time"`
	// seconds span before time expiration
	// Original SwapTimeSpan int64 `json:"time_span" yaml:"time_span"`
	SwapTimeSpan int64 `protobuf:"varint,10,opt,name=time_span,json=timeSpan,proto3" json:"time_span,omitempty" yaml:"time_span"`
}

func (m *AssetParam) Reset()      { *m = AssetParam{} }
func (*AssetParam) ProtoMessage() {}
func (*AssetParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd4db49772fc257b, []int{1}
}
func (m *AssetParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetParam.Merge(m, src)
}
func (m *AssetParam) XXX_Size() int {
	return m.Size()
}
func (m *AssetParam) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetParam.DiscardUnknown(m)
}

var xxx_messageInfo_AssetParam proto.InternalMessageInfo

func (m *AssetParam) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *AssetParam) GetCoinID() int {
	if m != nil {
		return m.CoinID
	}
	return 0
}

func (m *AssetParam) GetSupplyLimit() SupplyLimit {
	if m != nil {
		return m.SupplyLimit
	}
	return SupplyLimit{}
}

func (m *AssetParam) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *AssetParam) GetDeputyAddress() string {
	if m != nil {
		return m.DeputyAddress
	}
	return ""
}

func (m *AssetParam) GetSwapTimestamp() int64 {
	if m != nil {
		return m.SwapTimestamp
	}
	return 0
}

func (m *AssetParam) GetSwapTimeSpan() int64 {
	if m != nil {
		return m.SwapTimeSpan
	}
	return 0
}

// Params governance parameters for bep3 module
type Params struct {
	AssetParams []AssetParam `protobuf:"bytes,1,rep,name=asset_params,json=assetParams,proto3" json:"asset_params" yaml:"asset_params"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd4db49772fc257b, []int{2}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetAssetParams() []AssetParam {
	if m != nil {
		return m.AssetParams
	}
	return nil
}

// AssetSupply contains information about an asset's supply
type AssetSupply struct {
	IncomingSupply           types.Coin    `protobuf:"bytes,1,opt,name=incoming_supply,json=incomingSupply,proto3" json:"incoming_supply" yaml:"incoming_supply"`
	OutgoingSupply           types.Coin    `protobuf:"bytes,2,opt,name=outgoing_supply,json=outgoingSupply,proto3" json:"outgoing_supply" yaml:"outgoing_supply"`
	CurrentSupply            types.Coin    `protobuf:"bytes,3,opt,name=current_supply,json=currentSupply,proto3" json:"current_supply" yaml:"current_supply"`
	TimeLimitedCurrentSupply types.Coin    `protobuf:"bytes,4,opt,name=time_limited_current_supply,json=timeLimitedCurrentSupply,proto3" json:"time_limited_current_supply" yaml:"time_limited_current_supply"`
	TimeElapsed              time.Duration `protobuf:"bytes,5,opt,name=time_elapsed,json=timeElapsed,proto3,stdduration" json:"time_elapsed" yaml:"time_elapsed"`
}

func (m *AssetSupply) Reset()      { *m = AssetSupply{} }
func (*AssetSupply) ProtoMessage() {}
func (*AssetSupply) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd4db49772fc257b, []int{3}
}
func (m *AssetSupply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetSupply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetSupply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetSupply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetSupply.Merge(m, src)
}
func (m *AssetSupply) XXX_Size() int {
	return m.Size()
}
func (m *AssetSupply) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetSupply.DiscardUnknown(m)
}

var xxx_messageInfo_AssetSupply proto.InternalMessageInfo

func (m *AssetSupply) GetIncomingSupply() types.Coin {
	if m != nil {
		return m.IncomingSupply
	}
	return types.Coin{}
}

func (m *AssetSupply) GetOutgoingSupply() types.Coin {
	if m != nil {
		return m.OutgoingSupply
	}
	return types.Coin{}
}

func (m *AssetSupply) GetCurrentSupply() types.Coin {
	if m != nil {
		return m.CurrentSupply
	}
	return types.Coin{}
}

func (m *AssetSupply) GetTimeLimitedCurrentSupply() types.Coin {
	if m != nil {
		return m.TimeLimitedCurrentSupply
	}
	return types.Coin{}
}

func (m *AssetSupply) GetTimeElapsed() time.Duration {
	if m != nil {
		return m.TimeElapsed
	}
	return 0
}

//type GenesisState struct {
type GenesisState struct {
	Params            Params        `protobuf:"bytes,1,opt,name=params,proto3" json:"params" yaml:"params"`
	AtomicSwaps       []AtomicSwap  `protobuf:"bytes,2,rep,name=atomic_swaps,json=atomicSwaps,proto3" json:"atomic_swaps" yaml:"atomic_swaps"`
	Supplies          []AssetSupply `protobuf:"bytes,3,rep,name=supplies,proto3" json:"supplies" yaml:"supplies"`
	PreviousBlockTime time.Time     `protobuf:"bytes,4,opt,name=previous_block_time,json=previousBlockTime,proto3,stdtime" json:"previous_block_time" yaml:"previous_block_time"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd4db49772fc257b, []int{4}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetAtomicSwaps() []AtomicSwap {
	if m != nil {
		return m.AtomicSwaps
	}
	return nil
}

func (m *GenesisState) GetSupplies() []AssetSupply {
	if m != nil {
		return m.Supplies
	}
	return nil
}

func (m *GenesisState) GetPreviousBlockTime() time.Time {
	if m != nil {
		return m.PreviousBlockTime
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*SupplyLimit)(nil), "bep3.SupplyLimit")
	proto.RegisterType((*AssetParam)(nil), "bep3.AssetParam")
	proto.RegisterType((*Params)(nil), "bep3.Params")
	proto.RegisterType((*AssetSupply)(nil), "bep3.AssetSupply")
	proto.RegisterType((*GenesisState)(nil), "bep3.GenesisState")
}

func init() { proto.RegisterFile("bep3/genesis.proto", fileDescriptor_dd4db49772fc257b) }

var fileDescriptor_dd4db49772fc257b = []byte{
	// 1016 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4d, 0x6f, 0xdb, 0x36,
	0x18, 0xb6, 0x6c, 0xc7, 0xb5, 0xe9, 0x8f, 0x24, 0xec, 0xba, 0xa8, 0x29, 0x66, 0x05, 0x5c, 0x17,
	0x64, 0x03, 0x2a, 0xa1, 0xed, 0x2d, 0x1b, 0x8a, 0x45, 0xed, 0xba, 0x05, 0xe8, 0x21, 0x53, 0x7a,
	0x2a, 0x30, 0x68, 0xb4, 0xc5, 0x78, 0x44, 0x2d, 0x51, 0x30, 0xa9, 0x34, 0xbe, 0xf7, 0x07, 0xf4,
	0xd8, 0xe3, 0xb0, 0x5f, 0xd3, 0x63, 0x8f, 0xdb, 0x0e, 0xda, 0xe0, 0xfc, 0x03, 0x1f, 0x76, 0xd8,
	0x69, 0xe0, 0x87, 0x6c, 0xd9, 0x01, 0xd6, 0x05, 0xd8, 0xc9, 0xe2, 0xfb, 0xf5, 0x90, 0x0f, 0x9f,
	0xf7, 0xa5, 0x01, 0x1c, 0x90, 0xf4, 0xa1, 0x37, 0x22, 0x09, 0xe1, 0x94, 0xbb, 0xe9, 0x84, 0x09,
	0x06, 0xeb, 0xd2, 0xb6, 0xfb, 0xd1, 0x88, 0x8d, 0x98, 0x32, 0x78, 0xf2, 0x4b, 0xfb, 0x76, 0xfb,
	0x23, 0xc6, 0x46, 0x63, 0xe2, 0xa9, 0xd5, 0x20, 0x3b, 0xf3, 0xa2, 0x6c, 0x82, 0x05, 0x65, 0x89,
	0xf1, 0x3b, 0xeb, 0x7e, 0x41, 0x63, 0xc2, 0x05, 0x8e, 0xd3, 0xa2, 0xc0, 0x90, 0xf1, 0x98, 0x71,
	0x6f, 0x80, 0x39, 0xf1, 0xce, 0xef, 0x0f, 0x88, 0xc0, 0xf7, 0xbd, 0x21, 0xa3, 0x45, 0x81, 0x4d,
	0xb5, 0x21, 0xfe, 0x0a, 0xff, 0xc7, 0x04, 0xf4, 0x57, 0x15, 0xb4, 0x4f, 0xb3, 0x34, 0x1d, 0x4f,
	0x9f, 0xd1, 0x98, 0x0a, 0xf8, 0x1c, 0x6c, 0x8c, 0xe5, 0x87, 0x6d, 0xed, 0x59, 0x07, 0x2d, 0xff,
	0xd1, 0xbb, 0xdc, 0xa9, 0xfc, 0x9e, 0x3b, 0xfb, 0x23, 0x2a, 0x7e, 0xca, 0x06, 0xee, 0x90, 0xc5,
	0x9e, 0xa9, 0xa8, 0x7f, 0xee, 0xf1, 0xe8, 0xa5, 0x27, 0xa6, 0x29, 0xe1, 0xee, 0x71, 0x22, 0xe6,
	0xb9, 0xd3, 0x99, 0xe2, 0x78, 0x7c, 0x88, 0x54, 0x11, 0x14, 0xe8, 0x62, 0xf0, 0x10, 0x74, 0xe4,
	0x49, 0x42, 0xb5, 0x22, 0x91, 0x5d, 0xdd, 0xb3, 0x0e, 0x9a, 0xfe, 0xce, 0x3c, 0x77, 0x6e, 0xea,
	0xf0, 0xb2, 0x17, 0x05, 0x6d, 0xb9, 0x7c, 0xa6, 0x57, 0xf0, 0x05, 0x50, 0xcb, 0x30, 0x25, 0x13,
	0xca, 0x22, 0xbb, 0xb6, 0x67, 0x1d, 0xb4, 0x1f, 0xdc, 0x76, 0x35, 0x53, 0x6e, 0xc1, 0x94, 0xfb,
	0xc4, 0x30, 0xe9, 0xf7, 0xe5, 0x96, 0xe7, 0xb9, 0x03, 0x4b, 0x95, 0x75, 0x2e, 0x7a, 0xfb, 0x87,
	0x63, 0x05, 0x40, 0x5a, 0x4e, 0x94, 0x01, 0x72, 0xb0, 0xa5, 0xfc, 0x92, 0x9d, 0x48, 0xe3, 0xdb,
	0x75, 0x75, 0xf0, 0xe3, 0x6b, 0x1f, 0x7c, 0xa7, 0x84, 0x57, 0xaa, 0x87, 0x82, 0x9e, 0x34, 0xf9,
	0xd2, 0xa2, 0x8e, 0x74, 0x58, 0x7f, 0xfb, 0xb3, 0x53, 0x41, 0xaf, 0x1b, 0x00, 0x1c, 0x71, 0x4e,
	0xc4, 0x09, 0x9e, 0xe0, 0x18, 0xee, 0x83, 0x8d, 0x88, 0x24, 0x2c, 0x36, 0xbc, 0x6f, 0x2d, 0x99,
	0x54, 0x66, 0x14, 0x68, 0x37, 0xfc, 0x0a, 0xdc, 0x90, 0xb7, 0x17, 0x52, 0x4d, 0x62, 0xcd, 0xff,
	0x74, 0x96, 0x3b, 0x8d, 0xc7, 0x8c, 0x26, 0xc7, 0x4f, 0xe6, 0xb9, 0xd3, 0xd3, 0x39, 0x26, 0x04,
	0xfd, 0x9d, 0x3b, 0x35, 0x9a, 0x88, 0xa0, 0x21, 0x0d, 0xc7, 0x11, 0xfc, 0x1e, 0x74, 0xb8, 0xba,
	0x6c, 0x73, 0x56, 0x4d, 0xe6, 0xb6, 0x2b, 0x55, 0xe3, 0x96, 0x64, 0xe0, 0xdf, 0x31, 0x24, 0x9a,
	0xeb, 0x29, 0x27, 0xa1, 0xa0, 0xcd, 0x4b, 0x82, 0xf9, 0x1c, 0x34, 0xf0, 0x50, 0xd0, 0x73, 0xa2,
	0x88, 0x6b, 0xfa, 0xdb, 0xf3, 0xdc, 0xe9, 0xea, 0x2c, 0x6d, 0x47, 0x81, 0x09, 0x80, 0x5f, 0x83,
	0x5e, 0x44, 0xd2, 0x4c, 0x4c, 0x43, 0x1c, 0x45, 0x13, 0xc2, 0xb9, 0xbd, 0xa1, 0x0e, 0x7b, 0x7b,
	0x9e, 0x3b, 0xb7, 0x8a, 0xc3, 0x96, 0xfd, 0x28, 0xe8, 0x6a, 0xc3, 0x91, 0x5e, 0xc3, 0x10, 0xb4,
	0xce, 0xe8, 0x05, 0x89, 0xc2, 0x33, 0x42, 0xec, 0x86, 0x4a, 0xf6, 0xaf, 0x7d, 0x51, 0x5b, 0x1a,
	0x6a, 0x51, 0x08, 0x05, 0x4d, 0xf5, 0xfd, 0x94, 0x10, 0x98, 0x82, 0xcd, 0x98, 0x26, 0xa1, 0x6c,
	0xa0, 0x10, 0xc7, 0x2c, 0x4b, 0x84, 0x7d, 0x43, 0xc1, 0x7c, 0x77, 0x6d, 0x98, 0x8f, 0x35, 0xcc,
	0x5a, 0x39, 0x14, 0x74, 0x63, 0x9a, 0x9c, 0xbe, 0xc2, 0xe9, 0x91, 0x5a, 0x2b, 0x44, 0x7c, 0xb1,
	0x82, 0xd8, 0xfc, 0xdf, 0x11, 0xf1, 0x45, 0x09, 0xd1, 0x07, 0x2d, 0xe5, 0x96, 0xb2, 0xb4, 0x5b,
	0x4a, 0x44, 0x9f, 0xcd, 0x72, 0xa7, 0x2b, 0x43, 0x9e, 0x17, 0xf3, 0x66, 0xc9, 0xd3, 0x22, 0x16,
	0x05, 0x4d, 0x6e, 0x42, 0xe0, 0x11, 0x68, 0x29, 0xa1, 0xf3, 0x14, 0x27, 0x36, 0x50, 0x35, 0xee,
	0xce, 0x72, 0xa7, 0x53, 0xd4, 0x38, 0x4d, 0x71, 0xb2, 0x2c, 0xb1, 0x08, 0x45, 0x41, 0x53, 0x18,
	0xaf, 0x69, 0x83, 0x1f, 0x41, 0x43, 0x35, 0x00, 0x87, 0x27, 0xa0, 0x83, 0x65, 0x3f, 0x84, 0xa9,
	0x5a, 0xdb, 0xd6, 0x5e, 0xed, 0xa0, 0xfd, 0x60, 0x4b, 0x6b, 0x73, 0xd9, 0x29, 0xeb, 0xd2, 0x2c,
	0xe7, 0xa0, 0xa0, 0x8d, 0x17, 0x81, 0xdc, 0x20, 0xfc, 0x52, 0x07, 0x6d, 0x95, 0xae, 0xf5, 0x0d,
	0x07, 0x60, 0x93, 0x26, 0x43, 0x16, 0xd3, 0x64, 0x14, 0x6a, 0x21, 0xab, 0x9e, 0x93, 0x33, 0x45,
	0xf3, 0xea, 0xca, 0xee, 0x75, 0xcd, 0xac, 0x74, 0x65, 0x6b, 0x2d, 0x66, 0x8a, 0x61, 0x78, 0x2d,
	0x1f, 0x05, 0xbd, 0xc2, 0xb2, 0xc4, 0x60, 0x99, 0x18, 0xb1, 0x12, 0x46, 0xf5, 0x9a, 0x18, 0x6b,
	0xf9, 0x28, 0xe8, 0x15, 0x16, 0x83, 0x11, 0x82, 0xde, 0x30, 0x9b, 0x4c, 0x48, 0x22, 0x0a, 0x88,
	0xda, 0x87, 0x20, 0x3e, 0x31, 0x10, 0xa6, 0xd9, 0x56, 0xd3, 0x51, 0xd0, 0x35, 0x06, 0x03, 0xf0,
	0xda, 0x02, 0x77, 0xca, 0x73, 0x39, 0x5c, 0x83, 0xab, 0x7f, 0x08, 0xee, 0x0b, 0x03, 0x87, 0xae,
	0xce, 0xf8, 0x70, 0x1d, 0xdb, 0x2e, 0x8d, 0xfc, 0xc7, 0x2b, 0xdb, 0xf8, 0xc1, 0xbc, 0x1d, 0x64,
	0x8c, 0x53, 0x4e, 0x22, 0x35, 0x33, 0xfe, 0xf5, 0x01, 0x70, 0x56, 0x05, 0x52, 0x4e, 0xd6, 0x2f,
	0x80, 0x7a, 0x4f, 0xbe, 0xd1, 0x16, 0x23, 0x92, 0xdf, 0xaa, 0xa0, 0xf3, 0xad, 0x7e, 0xc6, 0x4f,
	0x05, 0x16, 0x04, 0x7e, 0x09, 0x1a, 0x0b, 0x1d, 0x4a, 0xbc, 0x8e, 0xd6, 0xa1, 0x56, 0x96, 0x7f,
	0xcb, 0x40, 0x98, 0x41, 0x57, 0xa8, 0xcf, 0xa4, 0x28, 0x29, 0x0b, 0x16, 0xd3, 0xa1, 0xea, 0x43,
	0x6e, 0x57, 0x57, 0xa4, 0xac, 0x3c, 0xb2, 0x51, 0xae, 0x48, 0xb9, 0x94, 0x23, 0xa5, 0xbc, 0x08,
	0xe4, 0xf0, 0x29, 0x68, 0x2a, 0xa6, 0x28, 0xe1, 0x76, 0x4d, 0x55, 0xdb, 0x2e, 0x35, 0x86, 0x66,
	0xca, 0xdf, 0x31, 0xe5, 0x36, 0x4b, 0x43, 0x9b, 0x12, 0x2e, 0xfb, 0xd6, 0x7c, 0xc2, 0x09, 0xb8,
	0x99, 0x4e, 0xc8, 0x39, 0x65, 0x19, 0x0f, 0x07, 0x63, 0x36, 0x7c, 0xa9, 0xa7, 0x80, 0xbe, 0xca,
	0xdd, 0x2b, 0x9c, 0x2e, 0xc6, 0x81, 0xbf, 0x6f, 0x6a, 0xef, 0x9a, 0x13, 0x5f, 0x2d, 0x82, 0xde,
	0x48, 0x6e, 0xb7, 0x0b, 0x8f, 0x2f, 0x1d, 0x32, 0xdf, 0x7f, 0xf4, 0x6e, 0xd6, 0xb7, 0xde, 0xcf,
	0xfa, 0xd6, 0x9f, 0xb3, 0xbe, 0xf5, 0xe6, 0xb2, 0x5f, 0x79, 0x7f, 0xd9, 0xaf, 0xfc, 0x7a, 0xd9,
	0xaf, 0xbc, 0xb8, 0x5b, 0x1a, 0x6d, 0xe4, 0x5e, 0xcc, 0x12, 0x32, 0xf5, 0xd4, 0x1f, 0x98, 0x98,
	0x45, 0xd9, 0x98, 0xe8, 0xe1, 0x36, 0x68, 0xa8, 0xed, 0x3c, 0xfc, 0x27, 0x00, 0x00, 0xff, 0xff,
	0xcf, 0x0b, 0xb2, 0xb4, 0x6d, 0x09, 0x00, 0x00,
}

func (m *SupplyLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SupplyLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SupplyLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TimeBasedLimit.Size()
		i -= size
		if _, err := m.TimeBasedLimit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.TimePeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.TimePeriod):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintGenesis(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	if m.TimeLimited {
		i--
		if m.TimeLimited {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.Limit.Size()
		i -= size
		if _, err := m.Limit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AssetParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SwapTimeSpan != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.SwapTimeSpan))
		i--
		dAtA[i] = 0x50
	}
	if m.SwapTimestamp != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.SwapTimestamp))
		i--
		dAtA[i] = 0x48
	}
	{
		size := m.MaxSwapAmount.Size()
		i -= size
		if _, err := m.MaxSwapAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.MinSwapAmount.Size()
		i -= size
		if _, err := m.MinSwapAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.FixedFee.Size()
		i -= size
		if _, err := m.FixedFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.DeputyAddress) > 0 {
		i -= len(m.DeputyAddress)
		copy(dAtA[i:], m.DeputyAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.DeputyAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.SupplyLimit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.CoinID != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.CoinID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetParams) > 0 {
		for iNdEx := len(m.AssetParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AssetParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AssetSupply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetSupply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetSupply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n3, err3 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.TimeElapsed, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.TimeElapsed):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintGenesis(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.TimeLimitedCurrentSupply.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.CurrentSupply.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.OutgoingSupply.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.IncomingSupply.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n8, err8 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.PreviousBlockTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.PreviousBlockTime):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintGenesis(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0x22
	if len(m.Supplies) > 0 {
		for iNdEx := len(m.Supplies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Supplies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AtomicSwaps) > 0 {
		for iNdEx := len(m.AtomicSwaps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AtomicSwaps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SupplyLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Limit.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.TimeLimited {
		n += 2
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.TimePeriod)
	n += 1 + l + sovGenesis(uint64(l))
	l = m.TimeBasedLimit.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *AssetParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.CoinID != 0 {
		n += 1 + sovGenesis(uint64(m.CoinID))
	}
	l = m.SupplyLimit.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.Active {
		n += 2
	}
	l = len(m.DeputyAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.FixedFee.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.MinSwapAmount.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.MaxSwapAmount.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.SwapTimestamp != 0 {
		n += 1 + sovGenesis(uint64(m.SwapTimestamp))
	}
	if m.SwapTimeSpan != 0 {
		n += 1 + sovGenesis(uint64(m.SwapTimeSpan))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AssetParams) > 0 {
		for _, e := range m.AssetParams {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *AssetSupply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.IncomingSupply.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.OutgoingSupply.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.CurrentSupply.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.TimeLimitedCurrentSupply.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.TimeElapsed)
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.AtomicSwaps) > 0 {
		for _, e := range m.AtomicSwaps {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Supplies) > 0 {
		for _, e := range m.Supplies {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.PreviousBlockTime)
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SupplyLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SupplyLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SupplyLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Limit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeLimited", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimeLimited = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimePeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.TimePeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeBasedLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TimeBasedLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinID", wireType)
			}
			m.CoinID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinID |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplyLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SupplyLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeputyAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeputyAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixedFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FixedFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSwapAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinSwapAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSwapAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxSwapAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapTimestamp", wireType)
			}
			m.SwapTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwapTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapTimeSpan", wireType)
			}
			m.SwapTimeSpan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwapTimeSpan |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetParams = append(m.AssetParams, AssetParam{})
			if err := m.AssetParams[len(m.AssetParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetSupply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetSupply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetSupply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncomingSupply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IncomingSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutgoingSupply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutgoingSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentSupply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeLimitedCurrentSupply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TimeLimitedCurrentSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeElapsed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.TimeElapsed, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AtomicSwaps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AtomicSwaps = append(m.AtomicSwaps, AtomicSwap{})
			if err := m.AtomicSwaps[len(m.AtomicSwaps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supplies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Supplies = append(m.Supplies, AssetSupply{})
			if err := m.Supplies[len(m.Supplies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousBlockTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.PreviousBlockTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
