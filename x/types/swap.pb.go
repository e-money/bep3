// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bep3/swap.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateAtomicSwap struct {
	From                string     `protobuf:"bytes,1,opt,name=From,proto3" json:"From,omitempty"`
	To                  string     `protobuf:"bytes,2,opt,name=To,proto3" json:"To,omitempty"`
	RecipientOtherChain string     `protobuf:"bytes,3,opt,name=RecipientOtherChain,proto3" json:"RecipientOtherChain,omitempty"`
	SenderOtherChain    string     `protobuf:"bytes,4,opt,name=SenderOtherChain,proto3" json:"SenderOtherChain,omitempty"`
	RandomNumberHash    string     `protobuf:"bytes,5,opt,name=RandomNumberHash,proto3" json:"RandomNumberHash,omitempty"`
	Timestamp           int64      `protobuf:"varint,6,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Amount              types.Coin `protobuf:"bytes,7,opt,name=Amount,proto3" json:"Amount" yaml:"amount"`
	TimeSpan            int64      `protobuf:"varint,8,opt,name=TimeSpan,proto3" json:"TimeSpan,omitempty"`
}

func (m *MsgCreateAtomicSwap) Reset()         { *m = MsgCreateAtomicSwap{} }
func (m *MsgCreateAtomicSwap) String() string { return proto.CompactTextString(m) }
func (*MsgCreateAtomicSwap) ProtoMessage()    {}
func (*MsgCreateAtomicSwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_576398e36903b242, []int{0}
}

func (m *MsgCreateAtomicSwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgCreateAtomicSwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateAtomicSwap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgCreateAtomicSwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateAtomicSwap.Merge(m, src)
}

func (m *MsgCreateAtomicSwap) XXX_Size() int {
	return m.Size()
}

func (m *MsgCreateAtomicSwap) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateAtomicSwap.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateAtomicSwap proto.InternalMessageInfo

func (m *MsgCreateAtomicSwap) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgCreateAtomicSwap) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *MsgCreateAtomicSwap) GetRecipientOtherChain() string {
	if m != nil {
		return m.RecipientOtherChain
	}
	return ""
}

func (m *MsgCreateAtomicSwap) GetSenderOtherChain() string {
	if m != nil {
		return m.SenderOtherChain
	}
	return ""
}

func (m *MsgCreateAtomicSwap) GetRandomNumberHash() string {
	if m != nil {
		return m.RandomNumberHash
	}
	return ""
}

func (m *MsgCreateAtomicSwap) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *MsgCreateAtomicSwap) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *MsgCreateAtomicSwap) GetTimeSpan() int64 {
	if m != nil {
		return m.TimeSpan
	}
	return 0
}

type MsgClaimAtomicSwap struct {
	From         string `protobuf:"bytes,1,opt,name=From,proto3" json:"From,omitempty"`
	SwapID       string `protobuf:"bytes,2,opt,name=SwapID,proto3" json:"SwapID,omitempty"`
	RandomNumber string `protobuf:"bytes,3,opt,name=RandomNumber,proto3" json:"RandomNumber,omitempty"`
}

func (m *MsgClaimAtomicSwap) Reset()         { *m = MsgClaimAtomicSwap{} }
func (m *MsgClaimAtomicSwap) String() string { return proto.CompactTextString(m) }
func (*MsgClaimAtomicSwap) ProtoMessage()    {}
func (*MsgClaimAtomicSwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_576398e36903b242, []int{1}
}

func (m *MsgClaimAtomicSwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgClaimAtomicSwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimAtomicSwap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgClaimAtomicSwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimAtomicSwap.Merge(m, src)
}

func (m *MsgClaimAtomicSwap) XXX_Size() int {
	return m.Size()
}

func (m *MsgClaimAtomicSwap) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimAtomicSwap.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimAtomicSwap proto.InternalMessageInfo

func (m *MsgClaimAtomicSwap) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgClaimAtomicSwap) GetSwapID() string {
	if m != nil {
		return m.SwapID
	}
	return ""
}

func (m *MsgClaimAtomicSwap) GetRandomNumber() string {
	if m != nil {
		return m.RandomNumber
	}
	return ""
}

type MsgRefundAtomicSwap struct {
	From   string `protobuf:"bytes,1,opt,name=From,proto3" json:"From,omitempty"`
	SwapID string `protobuf:"bytes,2,opt,name=SwapID,proto3" json:"SwapID,omitempty"`
}

func (m *MsgRefundAtomicSwap) Reset()         { *m = MsgRefundAtomicSwap{} }
func (m *MsgRefundAtomicSwap) String() string { return proto.CompactTextString(m) }
func (*MsgRefundAtomicSwap) ProtoMessage()    {}
func (*MsgRefundAtomicSwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_576398e36903b242, []int{2}
}

func (m *MsgRefundAtomicSwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgRefundAtomicSwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRefundAtomicSwap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgRefundAtomicSwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRefundAtomicSwap.Merge(m, src)
}

func (m *MsgRefundAtomicSwap) XXX_Size() int {
	return m.Size()
}

func (m *MsgRefundAtomicSwap) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRefundAtomicSwap.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRefundAtomicSwap proto.InternalMessageInfo

func (m *MsgRefundAtomicSwap) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgRefundAtomicSwap) GetSwapID() string {
	if m != nil {
		return m.SwapID
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgCreateAtomicSwap)(nil), "em.bep3.MsgCreateAtomicSwap")
	proto.RegisterType((*MsgClaimAtomicSwap)(nil), "em.bep3.MsgClaimAtomicSwap")
	proto.RegisterType((*MsgRefundAtomicSwap)(nil), "em.bep3.MsgRefundAtomicSwap")
}

func init() { proto.RegisterFile("bep3/swap.proto", fileDescriptor_576398e36903b242) }

var fileDescriptor_576398e36903b242 = []byte{
	// 403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x6d, 0xb7, 0xb8, 0xed, 0xf2, 0x57, 0x5b, 0x40, 0x26, 0x42, 0x4e, 0xe4, 0x53, 0x84,
	0x84, 0x97, 0xd2, 0x13, 0xdc, 0xd2, 0x20, 0x54, 0x0e, 0x80, 0xe4, 0xe4, 0xc4, 0x6d, 0x6d, 0x0f,
	0xf6, 0x4a, 0xdd, 0x9d, 0x95, 0x77, 0x4d, 0xc9, 0x5b, 0xf0, 0x56, 0xf4, 0xd8, 0x23, 0xa7, 0x0a,
	0x25, 0x6f, 0xc0, 0x13, 0x20, 0xaf, 0x2d, 0x08, 0x7f, 0x24, 0x24, 0x6e, 0x33, 0xdf, 0xf7, 0x8d,
	0x47, 0xfe, 0xed, 0x90, 0xdb, 0x39, 0xe8, 0x63, 0x66, 0xce, 0xb9, 0x4e, 0x75, 0x83, 0x16, 0xe9,
	0x1e, 0xc8, 0xb4, 0xd3, 0x46, 0x77, 0x2b, 0xac, 0xd0, 0x69, 0xac, 0xab, 0x7a, 0x7b, 0x14, 0x17,
	0x68, 0x24, 0x1a, 0x96, 0x73, 0x03, 0xec, 0xc3, 0x51, 0x0e, 0x96, 0x1f, 0xb1, 0x02, 0x85, 0xea,
	0xfd, 0xe4, 0x73, 0x40, 0x0e, 0x5f, 0x9b, 0x6a, 0xde, 0x00, 0xb7, 0x30, 0xb3, 0x28, 0x45, 0xb1,
	0x38, 0xe7, 0x9a, 0x52, 0xb2, 0xfb, 0xb2, 0x41, 0x19, 0xf9, 0x13, 0x7f, 0x7a, 0x90, 0xb9, 0x9a,
	0xde, 0x22, 0xc1, 0x12, 0xa3, 0xc0, 0x29, 0xc1, 0x12, 0xe9, 0x13, 0x72, 0x98, 0x41, 0x21, 0xb4,
	0x00, 0x65, 0xdf, 0xda, 0x1a, 0x9a, 0x79, 0xcd, 0x85, 0x8a, 0x76, 0x5c, 0xe0, 0x6f, 0x16, 0x7d,
	0x44, 0xee, 0x2c, 0x40, 0x95, 0xd0, 0x6c, 0xc5, 0x77, 0x5d, 0xfc, 0x0f, 0xbd, 0xcb, 0x66, 0x5c,
	0x95, 0x28, 0xdf, 0xb4, 0x32, 0x87, 0xe6, 0x94, 0x9b, 0x3a, 0xba, 0xd6, 0x67, 0x7f, 0xd7, 0xe9,
	0x43, 0x72, 0xb0, 0x14, 0x12, 0x8c, 0xe5, 0x52, 0x47, 0xe1, 0xc4, 0x9f, 0xee, 0x64, 0x3f, 0x05,
	0x7a, 0x4a, 0xc2, 0x99, 0xc4, 0x56, 0xd9, 0x68, 0x6f, 0xe2, 0x4f, 0xaf, 0x3f, 0x7d, 0x90, 0xf6,
	0x50, 0xd2, 0x0e, 0x4a, 0x3a, 0x40, 0x49, 0xe7, 0x28, 0xd4, 0xc9, 0xbd, 0x8b, 0xab, 0xb1, 0xf7,
	0xed, 0x6a, 0x7c, 0x73, 0xc5, 0xe5, 0xd9, 0xf3, 0x84, 0xbb, 0xb1, 0x24, 0x1b, 0xe6, 0xe9, 0x88,
	0xec, 0x77, 0x9f, 0x5d, 0x68, 0xae, 0xa2, 0x7d, 0xb7, 0xe6, 0x47, 0x9f, 0x94, 0x84, 0x76, 0x20,
	0xcf, 0xb8, 0x90, 0xff, 0xe0, 0x78, 0x9f, 0x84, 0x9d, 0xf7, 0xea, 0xc5, 0xc0, 0x72, 0xe8, 0x68,
	0x42, 0x6e, 0x6c, 0xff, 0xd9, 0x00, 0xf2, 0x17, 0x2d, 0x99, 0xb9, 0xe7, 0xca, 0xe0, 0x7d, 0xab,
	0xca, 0xff, 0x5b, 0x73, 0xf2, 0xec, 0x62, 0x1d, 0xfb, 0x97, 0xeb, 0xd8, 0xff, 0xba, 0x8e, 0xfd,
	0x4f, 0x9b, 0xd8, 0xbb, 0xdc, 0xc4, 0xde, 0x97, 0x4d, 0xec, 0xbd, 0x1b, 0x57, 0xc2, 0xd6, 0x6d,
	0x9e, 0x16, 0x28, 0x19, 0x3c, 0x96, 0xa8, 0x60, 0xc5, 0xdc, 0xbd, 0x7d, 0x64, 0x76, 0xa5, 0xc1,
	0xe4, 0xa1, 0x3b, 0x9a, 0xe3, 0xef, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb1, 0x43, 0x52, 0xc3, 0x86,
	0x02, 0x00, 0x00,
}

func (m *MsgCreateAtomicSwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateAtomicSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateAtomicSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeSpan != 0 {
		i = encodeVarintSwap(dAtA, i, uint64(m.TimeSpan))
		i--
		dAtA[i] = 0x40
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSwap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.Timestamp != 0 {
		i = encodeVarintSwap(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x30
	}
	if len(m.RandomNumberHash) > 0 {
		i -= len(m.RandomNumberHash)
		copy(dAtA[i:], m.RandomNumberHash)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.RandomNumberHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SenderOtherChain) > 0 {
		i -= len(m.SenderOtherChain)
		copy(dAtA[i:], m.SenderOtherChain)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.SenderOtherChain)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RecipientOtherChain) > 0 {
		i -= len(m.RecipientOtherChain)
		copy(dAtA[i:], m.RecipientOtherChain)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.RecipientOtherChain)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimAtomicSwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimAtomicSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimAtomicSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RandomNumber) > 0 {
		i -= len(m.RandomNumber)
		copy(dAtA[i:], m.RandomNumber)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.RandomNumber)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SwapID) > 0 {
		i -= len(m.SwapID)
		copy(dAtA[i:], m.SwapID)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.SwapID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRefundAtomicSwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRefundAtomicSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRefundAtomicSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SwapID) > 0 {
		i -= len(m.SwapID)
		copy(dAtA[i:], m.SwapID)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.SwapID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSwap(dAtA []byte, offset int, v uint64) int {
	offset -= sovSwap(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *MsgCreateAtomicSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	l = len(m.RecipientOtherChain)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	l = len(m.SenderOtherChain)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	l = len(m.RandomNumberHash)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovSwap(uint64(m.Timestamp))
	}
	l = m.Amount.Size()
	n += 1 + l + sovSwap(uint64(l))
	if m.TimeSpan != 0 {
		n += 1 + sovSwap(uint64(m.TimeSpan))
	}
	return n
}

func (m *MsgClaimAtomicSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	l = len(m.SwapID)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	l = len(m.RandomNumber)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	return n
}

func (m *MsgRefundAtomicSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	l = len(m.SwapID)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	return n
}

func sovSwap(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}

func sozSwap(x uint64) (n int) {
	return sovSwap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *MsgCreateAtomicSwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSwap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateAtomicSwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateAtomicSwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientOtherChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientOtherChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderOtherChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderOtherChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomNumberHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandomNumberHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeSpan", wireType)
			}
			m.TimeSpan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeSpan |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSwap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSwap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgClaimAtomicSwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSwap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimAtomicSwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimAtomicSwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwapID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandomNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSwap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSwap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgRefundAtomicSwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSwap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRefundAtomicSwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRefundAtomicSwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwapID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSwap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSwap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipSwap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSwap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSwap
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSwap
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSwap
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSwap        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSwap          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSwap = fmt.Errorf("proto: unexpected end of group")
)
