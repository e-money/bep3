syntax = "proto3";
package bep3;

option go_package = "github.com/e-money/bep3/module/types";

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/v1beta1/coin.proto";
import "bep3/genesis.proto";
import "bep3/swap.proto";

service Query {
  rpc AssetSupply(QueryAssetSupplyRequest) returns (QueryAssetSupplyResponse) {
    option (google.api.http).get = "/e-money/bep3/supply";
  };
  rpc AssetSupplies(QueryAssetSuppliesRequest) returns (QueryAssetSuppliesResponse) {
    option (google.api.http).get = "/e-money/bep3/supplies";
  };
  rpc Swap(QuerySwapRequest) returns (QuerySwapResponse) {
    option (google.api.http).get = "/e-money/bep3/swap";
  };
  rpc Swaps(QuerySwapsRequest) returns (QuerySwapsResponse) {
    option (google.api.http).get = "/e-money/bep3/swap";
  };
}

// gRPC asset req
message QueryAssetSupplyRequest {
  string denom = 1 [(gogoproto.moretags) = "yaml:\"denom\""];
}

// gRPC asset supply response
message QueryAssetSupplyResponse {
  AssetSupply supply = 1 [
    (gogoproto.moretags) = "yaml:\"supply\"",
    (gogoproto.nullable) = false
  ];
}

// gRPC assets req
message QueryAssetSuppliesRequest {}

// gRPC asset supplies response
message QueryAssetSuppliesResponse {
  AssetSupplies supplies = 1 [
    (gogoproto.moretags) = "yaml:\"supplies\"",
    (gogoproto.nullable) = false
  ];
}

// gRPC swap req
message QuerySwapRequest {
  bytes swap_id = 1 [
    (gogoproto.customname) = "SwapID",
    (gogoproto.casttype) = "github.com/tendermint/tendermint/libs/bytes.HexBytes",
    (gogoproto.moretags) = "yaml:\"swap_id\""
  ];
}

// gRPC swap response
message QuerySwapResponse {
  AtomicSwap swap = 1[
    (gogoproto.moretags) = "yaml:\"swap\"",
    (gogoproto.nullable) = false
  ];
}

// gRPC swaps req
message QuerySwapsRequest {
  QueryAtomicSwaps params = 1 [
    (gogoproto.moretags) = "yaml:\"params\""
  ];
}

// gRPC swap response
message QuerySwapsResponse {
  AugmentedAtomicSwaps swaps = 1 [
    (gogoproto.moretags) = "yaml:\"swaps\"",
    (gogoproto.nullable) = false
  ];
}

/* type QueryAssetSupply struct {
	Denom string `json:"denom" yaml:"denom"`
}*/
// QueryAssetSupply contains the params for query 'custom/bep3/supply'
message QueryAssetSupply {
  string denom = 1 [(gogoproto.moretags) = "yaml:\"denom\""];
}

/*
type QueryAtomicSwapByID struct {
	SwapID tmbytes.HexBytes `json:"swap_id" yaml:"swap_id"`
}
*/

// QueryAtomicSwapByID contains the params for query 'custom/bep3/swap'
message QueryAtomicSwapByID {
  bytes swap_id = 1 [
    (gogoproto.customname) = "SwapID",
    (gogoproto.casttype) = "github.com/tendermint/tendermint/libs/bytes.HexBytes",
    (gogoproto.moretags) = "yaml:\"swap_id\""
  ];
}

/*
// QueryAssetSupplies contains the params for an AssetSupplies query
type QueryAssetSupplies struct {
	Page  int `json:"page" yaml:"page"`
	Limit int `json:"limit" yaml:"limit"`
}
 */
message QueryAssetSupplies {
  int64 page = 1 [
    (gogoproto.moretags) = "yaml:\"page\"",
    (gogoproto.casttype) = "int"
  ];
  int64 limit = 2 [
    (gogoproto.moretags) = "yaml:\"limit\"",
    (gogoproto.casttype) = "int"
  ];
}

/*
type QueryAtomicSwaps struct {
	Page       int            `json:"page" yaml:"page"`
	Limit      int            `json:"limit" yaml:"limit"`
	Involve    sdk.AccAddress `json:"involve" yaml:"involve"`
	Expiration int64          `json:"expiration" yaml:"expiration"`
	Status     SwapStatus     `json:"status" yaml:"status"`
	Direction  SwapDirection  `json:"direction" yaml:"direction"`
}
 */

// QueryAtomicSwaps contains the params for an AtomicSwaps query
message QueryAtomicSwaps {
  int64 page = 1 [
    (gogoproto.moretags) = "yaml:\"page\"",
    (gogoproto.casttype) = "int"
  ];
  int64 limit = 2 [
    (gogoproto.moretags) = "yaml:\"limit\"",
    (gogoproto.casttype) = "int"
  ];
  string involve = 3 [(gogoproto.moretags) = "yaml:\"involve\""];
  int64 expiration = 4 [(gogoproto.moretags) = "yaml:\"involve\""];
  uint32 status = 5 [
    (gogoproto.casttype) = "SwapStatus",
    (gogoproto.moretags) = "yaml:\"status\""
  ];
  uint32 direction = 6 [
    (gogoproto.casttype) = "SwapDirection",
    (gogoproto.moretags) = "yaml:\"direction\""
  ];
}